// FPT Polytechnic majors data
const fptMajors = {
    "technology": [
        "Ph√°t tri·ªÉn ph·∫ßn m·ªÅm",
        "Thi·∫øt k·∫ø ƒë·ªì h·ªça",
        "·ª®ng d·ª•ng ph·∫ßn m·ªÅm",
        "Qu·∫£n tr·ªã m·∫°ng m√°y t√≠nh",
        "Thi·∫øt k·∫ø trang web"
    ],
    "business": [
        "Qu·∫£n tr·ªã kinh doanh",
        "K·∫ø to√°n",
        "Marketing",
        "Logistics",
        "Qu·∫£n l√Ω kh√°ch s·∫°n"
    ],
    "creative": [
        "Thi·∫øt k·∫ø ƒë·ªì h·ªça",
        "Thi·∫øt k·∫ø n·ªôi th·∫•t",
        "Thi·∫øt k·∫ø th·ªùi trang",
        "Quay phim v√† bi√™n t·∫≠p"
    ],
    "engineering": [
        "C√¥ng ngh·ªá √¥ t√¥",
        "ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng",
        "C∆° kh√≠ m√°y t√≠nh",
        "ƒêi·ªán c√¥ng nghi·ªáp"
    ]
};

// Enhanced API Configuration with GitHub Copilot integration
const API_CONFIG = {
    provider: 'demo', // 'openai', 'github', 'gemini', ho·∫∑c 'demo'
    openaiKey: 'demo-mode', // OpenAI API key (b·∫Øt ƒë·∫ßu b·∫±ng sk-)
    githubToken: 'demo-mode', // GitHub Personal Access Token
    githubUsername: 'your-username', // GitHub username
    githubRepo: 'your-repo', // GitHub repository name
    githubBranch: 'main' // GitHub branch
};

// GitHub Copilot Chat Integration
class GitHubCopilotChat {
    constructor(config) {
        this.config = config;
        this.baseUrl = 'https://api.github.com';
        this.isAvailable = false;
        this.checkAvailability();
    }

    async checkAvailability() {
        if (this.config.githubToken === 'demo-mode') {
            this.isAvailable = false;
            return;
        }

        try {
            const response = await fetch(`${this.baseUrl}/user`, {
                headers: {
                    'Authorization': `token ${this.config.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });
            this.isAvailable = response.ok;
        } catch (error) {
            console.warn('GitHub API not available:', error);
            this.isAvailable = false;
        }
    }

    async sendMessage(message, context = '') {
        if (!this.isAvailable) {
            throw new Error('GitHub Copilot kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.');
        }

        try {
            // Create a new issue with the question
            const issueData = {
                title: `Copilot Chat: ${message.substring(0, 50)}...`,
                body: `## C√¢u h·ªèi t·ª´ AI Copilot
${message}

## Ng·ªØ c·∫£nh
${context}

## Y√™u c·∫ßu
Vui l√≤ng tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† h·ªØu √≠ch.`,
                labels: ['copilot-chat', 'question']
            };

            const response = await fetch(`${this.baseUrl}/repos/${this.config.githubUsername}/${this.config.githubRepo}/issues`, {
                method: 'POST',
                headers: {
                    'Authorization': `token ${this.config.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(issueData)
            });

            if (!response.ok) {
                throw new Error('Kh√¥ng th·ªÉ t·∫°o issue tr√™n GitHub');
            }

            const issue = await response.json();
            
            // For demo purposes, return a simulated response
            // In production, you would wait for a human response or use GitHub Actions
            return this.generateSimulatedResponse(message);
            
        } catch (error) {
            console.error('GitHub Copilot Error:', error);
            throw new Error(`L·ªói GitHub Copilot: ${error.message}`);
        }
    }

    generateSimulatedResponse(message) {
        // Enhanced simulated responses for GitHub Copilot
        const responses = {
            'code': 'üíª **GitHub Copilot c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi code!**\n\nT√¥i c√≥ th·ªÉ:\n‚Ä¢ G·ª£i √Ω code ho√†n ch·ªânh\n‚Ä¢ Gi·∫£i th√≠ch logic\n‚Ä¢ T·ªëi ∆∞u h√≥a code\n‚Ä¢ Debug v·∫•n ƒë·ªÅ\n\nB·∫°n mu·ªën t√¥i gi√∫p g√¨ c·ª• th·ªÉ? üòä',
            'github': 'üöÄ **GitHub Copilot - Tr·ª£ l√Ω AI m·∫°nh m·∫Ω!**\n\n**T√≠nh nƒÉng ch√≠nh:**\n‚Ä¢ Code completion th√¥ng minh\n‚Ä¢ Code explanation chi ti·∫øt\n‚Ä¢ Bug detection v√† fix\n‚Ä¢ Documentation generation\n\n**L·ª£i √≠ch:**\n‚Ä¢ TƒÉng t·ªëc ƒë·ªô coding\n‚Ä¢ Gi·∫£m l·ªói syntax\n‚Ä¢ H·ªçc h·ªèi best practices\n‚Ä¢ H·ªó tr·ª£ nhi·ªÅu ng√¥n ng·ªØ\n\nB·∫°n mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ t√≠nh nƒÉng n√†o? ü§î',
            'help': 'ü§ñ **GitHub Copilot - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**\n\n**C√°ch ho·∫°t ƒë·ªông:**\n1. C√†i ƒë·∫∑t extension trong VS Code\n2. ƒêƒÉng nh·∫≠p v·ªõi GitHub account\n3. B·∫Øt ƒë·∫ßu code v√† nh·∫≠n g·ª£i √Ω\n4. S·ª≠ d·ª•ng `/` ƒë·ªÉ t·∫°o comment\n\n**L·ªánh h·ªØu √≠ch:**\n‚Ä¢ `/explain` - Gi·∫£i th√≠ch code\n‚Ä¢ `/fix` - S·ª≠a l·ªói\n‚Ä¢ `/test` - T·∫°o test cases\n‚Ä¢ `/doc` - T·∫°o documentation\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ? üòä'
        };

        const lowerMessage = message.toLowerCase();
        
        if (lowerMessage.includes('code') || lowerMessage.includes('l·∫≠p tr√¨nh')) {
            return responses.code;
        } else if (lowerMessage.includes('github') || lowerMessage.includes('copilot')) {
            return responses.github;
        } else if (lowerMessage.includes('help') || lowerMessage.includes('h∆∞·ªõng d·∫´n')) {
            return responses.help;
        } else {
            return `ü§ñ **GitHub Copilot ƒëang x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n...**\n\n"${message}"\n\n**T√≠nh nƒÉng GitHub Copilot:**\n‚Ä¢ üíª Code completion th√¥ng minh\n‚Ä¢ üß† AI-powered suggestions\n‚Ä¢ üìö Documentation generation\n‚Ä¢ üêõ Bug detection\n‚Ä¢ üöÄ Productivity boost\n\nB·∫°n c√≥ mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ GitHub Copilot kh√¥ng? üòä`;
        }
    }
}

// Initialize GitHub Copilot Chat
const githubCopilot = new GitHubCopilotChat(API_CONFIG);

// Provider management functions
function switchProvider() {
    const providerSelection = document.getElementById('providerSelection');
    providerSelection.style.display = providerSelection.style.display === 'none' ? 'block' : 'none';
}

function setProvider(provider) {
    API_CONFIG.provider = provider;
    
    // Update UI
    updateProviderUI(provider);
    
    // Update status
    const statusElement = document.getElementById('copilotStatus');
    statusElement.textContent = getProviderDisplayName(provider);
    statusElement.className = `copilot-status ${provider}`;
    
    // Hide provider selection
    document.getElementById('providerSelection').style.display = 'none';
    
    // Show appropriate info
    updateProviderInfo(provider);
    
    // Save preference
    localStorage.setItem('copilotProvider', provider);
}

function updateProviderUI(provider) {
    // Remove active class from all buttons
    document.querySelectorAll('.provider-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Add active class to selected provider
    document.querySelector(`[onclick="setProvider('${provider}')"]`).classList.add('active');
}

function getProviderDisplayName(provider) {
    const names = {
        'demo': 'Demo Mode',
        'github': 'GitHub Copilot',
        'openai': 'OpenAI GPT'
    };
    return names[provider] || 'Demo Mode';
}

function updateProviderInfo(provider) {
    const infoElement = document.getElementById('providerInfo');
    const info = {
        'demo': '<strong>Demo Mode:</strong> S·ª≠ d·ª•ng c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c thi·∫øt k·∫ø s·∫µn, kh√¥ng c·∫ßn API key',
        'github': '<strong>GitHub Copilot:</strong> S·ª≠ d·ª•ng GitHub API ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi Copilot. C·∫ßn c·∫•u h√¨nh GitHub token v√† repository',
        'openai': '<strong>OpenAI GPT:</strong> S·ª≠ d·ª•ng OpenAI API. C·∫ßn c·∫•u h√¨nh OpenAI API key'
    };
    
    infoElement.innerHTML = `<p>${info[provider] || info['demo']}</p>`;
}

// Load saved provider preference
function loadProviderPreference() {
    const savedProvider = localStorage.getItem('copilotProvider');
    if (savedProvider && ['demo', 'github', 'openai'].includes(savedProvider)) {
        setProvider(savedProvider);
    }
}

// Initialize sliders
document.addEventListener('DOMContentLoaded', function() {
    const sliders = ['technology', 'creativity', 'communication', 'logic', 'business', 'manual'];
    sliders.forEach(slider => {
        const element = document.getElementById(slider);
        const valueElement = document.getElementById(slider + 'Value');
        
        element.addEventListener('input', function() {
            valueElement.textContent = this.value;
        });
    });

    loadHistory();
    loadCopilotHistory(); // Load copilot conversation history
    updateCopilotStatus(); // Update status indicator
    loadProviderPreference(); // Load saved provider preference
});

function showSection(sectionName) {
    // Hide all sections
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => section.classList.remove('active'));
    
    // Show selected section
    document.getElementById(sectionName).classList.add('active');
    
    // Update navigation
    const navBtns = document.querySelectorAll('.nav-btn');
    navBtns.forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    // Auto-generate infographic if switching to infographic tab
    if (sectionName === 'infographic') {
        generateInfographic();
    }
}

document.getElementById('surveyForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (API_CONFIG.provider === 'demo') {
        // Demo mode - proceed without API key
        console.log('Running in demo mode');
    } else if (API_CONFIG.provider === 'openai' && (!API_CONFIG.openaiKey || API_CONFIG.openaiKey === 'YOUR_API_KEY_HERE' || API_CONFIG.openaiKey === 'demo-mode')) {
        alert('Vui l√≤ng c·∫•u h√¨nh OpenAI API Key th·ª±c trong code tr∆∞·ªõc khi s·ª≠ d·ª•ng! Ho·∫∑c chuy·ªÉn sang ch·∫ø ƒë·ªô demo.');
        return;
    } else if (API_CONFIG.provider === 'github' && (!API_CONFIG.githubToken || API_CONFIG.githubToken === 'YOUR_GITHUB_TOKEN' || API_CONFIG.githubToken === 'demo-mode')) {
        alert('Vui l√≤ng c·∫•u h√¨nh GitHub Token th·ª±c trong code tr∆∞·ªõc khi s·ª≠ d·ª•ng! Ho·∫∑c chuy·ªÉn sang ch·∫ø ƒë·ªô demo.');
        return;
    }

    // Show loading
    document.getElementById('loading').style.display = 'block';
    document.getElementById('surveyForm').style.display = 'none';
    
    // Simulate progress
    simulateProgress();
    
    // Collect form data
    const formData = collectFormData();
    
    try {
        // Call AI API
        const result = await analyzeWithAI(formData);
        
        // Display results
        displayResults(result, formData);
        
        // Save to history
        saveToHistory(result, formData);
        
        // Switch to results tab
        showSection('results');
        document.querySelector('[onclick="showSection(\'results\')"]').classList.add('active');
        document.querySelector('[onclick="showSection(\'survey\')"]').classList.remove('active');
        
    } catch (error) {
        alert('C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch: ' + error.message);
    } finally {
        // Hide loading
        document.getElementById('loading').style.display = 'none';
        document.getElementById('surveyForm').style.display = 'block';
    }
});

function collectFormData() {
    return {
        name: document.getElementById('name').value,
        age: document.getElementById('age').value,
        interests: document.getElementById('interests').value,
        skills: document.getElementById('skills').value,
        scores: {
            math: document.getElementById('mathScore').value,
            english: document.getElementById('englishScore').value,
            literature: document.getElementById('literatureScore').value,
            physics: document.getElementById('physicsScore').value
        },
        favoriteSubjects: document.getElementById('favoriteSubjects').value,
        careerGoals: document.getElementById('careerGoals').value,
        studyHabits: document.getElementById('studyHabits').value,
        preferences: {
            technology: document.getElementById('technology').value,
            creativity: document.getElementById('creativity').value,
            communication: document.getElementById('communication').value,
            logic: document.getElementById('logic').value,
            business: document.getElementById('business').value,
            manual: document.getElementById('manual').value
        }
    };
}

async function analyzeWithAI(formData) {
    const provider = API_CONFIG.provider;
    const apiKey = API_CONFIG.openaiKey;
    
    // Demo mode - return predefined analysis
    if (provider === 'demo') {
        return getDemoAnalysisResult(formData);
    }
    
    const prompt = `
B·∫°n l√† chuy√™n gia t∆∞ v·∫•n gi√°o d·ª•c. D·ª±a tr√™n th√¥ng tin sau c·ªßa h·ªçc sinh, h√£y ph√¢n t√≠ch v√† ƒë∆∞a ra 3 g·ª£i √Ω ng√†nh h·ªçc ph√π h·ª£p nh·∫•t t·∫°i FPT Polytechnic:

Th√¥ng tin h·ªçc sinh:
- T√™n: ${formData.name}
- Tu·ªïi: ${formData.age}
- S·ªü th√≠ch: ${formData.interests}
- K·ªπ nƒÉng n·ªïi b·∫≠t: ${formData.skills}
- ƒêi·ªÉm s·ªë: To√°n ${formData.scores.math}, Anh ${formData.scores.english}, VƒÉn ${formData.scores.literature}, L√Ω ${formData.scores.physics}
- M√¥n y√™u th√≠ch: ${formData.favoriteSubjects}
- ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp: ${formData.careerGoals}
- Th√≥i quen h·ªçc t·∫≠p: ${formData.studyHabits}
- M·ª©c ƒë·ªô y√™u th√≠ch (1-10): C√¥ng ngh·ªá ${formData.preferences.technology}, S√°ng t·∫°o ${formData.preferences.creativity}, Giao ti·∫øp ${formData.preferences.communication}, Logic ${formData.preferences.logic}, Kinh doanh ${formData.preferences.business}, Th·ª±c h√†nh ${formData.preferences.manual}

C√°c ng√†nh h·ªçc c√≥ t·∫°i FPT Polytechnic:
C√¥ng ngh·ªá: Ph√°t tri·ªÉn ph·∫ßn m·ªÅm, Thi·∫øt k·∫ø ƒë·ªì h·ªça, ·ª®ng d·ª•ng ph·∫ßn m·ªÅm, Qu·∫£n tr·ªã m·∫°ng m√°y t√≠nh, Thi·∫øt k·∫ø trang web
Kinh doanh: Qu·∫£n tr·ªã kinh doanh, K·∫ø to√°n, Marketing, Logistics, Qu·∫£n l√Ω kh√°ch s·∫°n
S√°ng t·∫°o: Thi·∫øt k·∫ø ƒë·ªì h·ªça, Thi·∫øt k·∫ø n·ªôi th·∫•t, Thi·∫øt k·∫ø th·ªùi trang, Quay phim v√† bi√™n t·∫≠p
K·ªπ thu·∫≠t: C√¥ng ngh·ªá √¥ t√¥, ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng, C∆° kh√≠ m√°y t√≠nh, ƒêi·ªán c√¥ng nghi·ªáp

H√£y tr·∫£ v·ªÅ JSON v·ªõi format:
{
  "analysis": "Ph√¢n t√≠ch t·ªïng quan v·ªÅ h·ªçc sinh",
  "recommendations": [
    {
      "major": "T√™n ng√†nh h·ªçc",
      "compatibility": "95%",
      "reasons": ["L√Ω do 1", "L√Ω do 2", "L√Ω do 3"],
      "career_prospects": "Tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp",
      "skills_needed": "K·ªπ nƒÉng c·∫ßn ph√°t tri·ªÉn"
    }
  ]
}
`;

    if (provider === 'openai') {
        try {
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        { role: 'system', content: 'B·∫°n l√† chuy√™n gia t∆∞ v·∫•n gi√°o d·ª•c chuy√™n nghi·ªáp.' },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.7
                })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                const errorMessage = errorData?.error?.message || response.statusText || 'Unknown error';
                throw new Error(`API OpenAI Error: ${errorMessage}`);
            }

            const data = await response.json();
            const content = data.choices[0].message.content;
            
            try {
                return JSON.parse(content);
            } catch (parseError) {
                console.error('Failed to parse AI response:', content);
                throw new Error('AI response format kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
            }
        } catch (error) {
            console.error('OpenAI API Error:', error);
            throw new Error(`L·ªói k·∫øt n·ªëi OpenAI: ${error.message}`);
        }
    } else if (provider === 'gemini') {
        // Gemini API integration (placeholder)
        throw new Error('Gemini API ch∆∞a ƒë∆∞·ª£c t√≠ch h·ª£p. Vui l√≤ng s·ª≠ d·ª•ng OpenAI ho·∫∑c ch·∫ø ƒë·ªô demo.');
    } else {
        throw new Error('Provider kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn OpenAI ho·∫∑c demo.');
    }
}

function getDemoAnalysisResult(formData) {
    const prefs = formData.preferences;
    const scores = formData.scores;
    
    // Calculate academic level
    const academicScores = [
        parseFloat(scores.math) || 0,
        parseFloat(scores.english) || 0, 
        parseFloat(scores.literature) || 0,
        parseFloat(scores.physics) || 0
    ].filter(score => score > 0);
    
    const avgScore = academicScores.length > 0 ? 
        academicScores.reduce((a, b) => a + b) / academicScores.length : 5;
    
    // Calculate interest level
    const interestScores = [
        parseInt(prefs.technology),
        parseInt(prefs.creativity),
        parseInt(prefs.communication),
        parseInt(prefs.logic),
        parseInt(prefs.business),
        parseInt(prefs.manual)
    ];
    const avgInterest = interestScores.reduce((a, b) => a + b) / interestScores.length;
    
    // Determine academic category
    let academicLevel = "";
    if (avgScore >= 8) {
        academicLevel = "xu·∫•t s·∫Øc";
    } else if (avgScore >= 6.5) {
        academicLevel = "gi·ªèi";
    } else if (avgScore >= 5) {
        academicLevel = "kh√°";
    } else {
        academicLevel = "trung b√¨nh";
    }
    
    // Calculate compatibility for each major
    const majors = [
        {
            name: "Ph√°t tri·ªÉn ph·∫ßn m·ªÅm",
            category: "technology",
            requiredScores: { math: 6, english: 5, logic: 6 },
            requiredInterests: { technology: 6, logic: 6 },
            academicWeight: 0.4,
            interestWeight: 0.6,
            career_prospects: "L·∫≠p tr√¨nh vi√™n, Software Engineer, Full-stack Developer, Technical Lead",
            skills_needed: "Ng√¥n ng·ªØ l·∫≠p tr√¨nh (Java, Python, JavaScript), C∆° s·ªü d·ªØ li·ªáu, Framework"
        },
        {
            name: "Thi·∫øt k·∫ø ƒë·ªì h·ªça",
            category: "creative", 
            requiredScores: { english: 5, literature: 5 },
            requiredInterests: { creativity: 7, manual: 5 },
            academicWeight: 0.3,
            interestWeight: 0.7,
            career_prospects: "Graphic Designer, UI/UX Designer, Brand Designer, Art Director",
            skills_needed: "Adobe Creative Suite (Photoshop, Illustrator), Figma, Typography, Color Theory"
        },
        {
            name: "Qu·∫£n tr·ªã kinh doanh",
            category: "business",
            requiredScores: { math: 5, english: 6, literature: 5 },
            requiredInterests: { business: 6, communication: 6 },
            academicWeight: 0.4,
            interestWeight: 0.6,
            career_prospects: "Qu·∫£n l√Ω d·ª± √°n, Business Analyst, Operations Manager, Entrepreneur",
            skills_needed: "Qu·∫£n l√Ω d·ª± √°n, Ph√¢n t√≠ch kinh doanh, K·ªπ nƒÉng l√£nh ƒë·∫°o, Excel n√¢ng cao"
        },
        {
            name: "K·∫ø to√°n",
            category: "business",
            requiredScores: { math: 7, english: 5 },
            requiredInterests: { logic: 6, business: 5 },
            academicWeight: 0.5,
            interestWeight: 0.5,
            career_prospects: "K·∫ø to√°n vi√™n, Ki·ªÉm to√°n vi√™n, Chuy√™n vi√™n t√†i ch√≠nh, CFO",
            skills_needed: "Ph·∫ßn m·ªÅm k·∫ø to√°n (MISA, FAST), Excel n√¢ng cao, Lu·∫≠t thu·∫ø, Chu·∫©n m·ª±c k·∫ø to√°n"
        },
        {
            name: "Marketing",
            category: "business",
            requiredScores: { english: 6, literature: 5 },
            requiredInterests: { creativity: 6, communication: 7, business: 6 },
            academicWeight: 0.3,
            interestWeight: 0.7,
            career_prospects: "Digital Marketing, Content Creator, Brand Manager, Social Media Manager",
            skills_needed: "Google Ads, Facebook Ads, SEO/SEM, Content Marketing, Analytics"
        },
        {
            name: "Qu·∫£n tr·ªã m·∫°ng m√°y t√≠nh",
            category: "technology",
            requiredScores: { math: 6, physics: 6, english: 5 },
            requiredInterests: { technology: 7, logic: 6 },
            academicWeight: 0.4,
            interestWeight: 0.6,
            career_prospects: "Network Administrator, System Engineer, IT Support, Cloud Engineer",
            skills_needed: "Cisco CCNA, Windows Server, Linux, Cloud Computing (AWS, Azure)"
        },
        {
            name: "Thi·∫øt k·∫ø n·ªôi th·∫•t",
            category: "creative",
            requiredScores: { math: 5, physics: 4 },
            requiredInterests: { creativity: 8, manual: 6 },
            academicWeight: 0.3,
            interestWeight: 0.7,
            career_prospects: "Interior Designer, Space Planner, Furniture Designer, Architectural Visualizer",
            skills_needed: "AutoCAD, 3ds Max, SketchUp, V-Ray, Ki·∫øn th·ª©c v·ªÅ v·∫≠t li·ªáu v√† m√†u s·∫Øc"
        },
        {
            name: "C√¥ng ngh·ªá √¥ t√¥",
            category: "engineering",
            requiredScores: { math: 6, physics: 7 },
            requiredInterests: { manual: 7, technology: 6 },
            academicWeight: 0.5,
            interestWeight: 0.5,
            career_prospects: "K·ªπ thu·∫≠t vi√™n √¥ t√¥, Ch·∫©n ƒëo√°n xe, Service Advisor, Workshop Manager",
            skills_needed: "Ch·∫©n ƒëo√°n l·ªói, S·ª≠a ch·ªØa ƒë·ªông c∆°, H·ªá th·ªëng ƒëi·ªán √¥ t√¥, C√¥ng ngh·ªá hybrid/electric"
        }
    ];
    
    // Calculate compatibility for each major
    const results = majors.map(major => {
        let academicScore = 0;
        let interestScore = 0;
        let meetRequirements = true;
        let reasons = [];
        
        // Calculate academic compatibility
        Object.keys(major.requiredScores).forEach(subject => {
            const studentScore = parseFloat(scores[subject]) || 0;
            const requiredScore = major.requiredScores[subject];
            
            if (studentScore >= requiredScore) {
                academicScore += (studentScore / 10) * 100;
                if (studentScore >= requiredScore + 1) {
                    reasons.push(`ƒêi·ªÉm ${getSubjectName(subject)} xu·∫•t s·∫Øc (${studentScore}/10)`);
                }
            } else {
                meetRequirements = false;
                academicScore += (studentScore / requiredScore) * 50;
            }
        });
        academicScore = academicScore / Object.keys(major.requiredScores).length;
        
        // Calculate interest compatibility  
        Object.keys(major.requiredInterests).forEach(interest => {
            const studentInterest = parseInt(prefs[interest]);
            const requiredInterest = major.requiredInterests[interest];
            
            if (studentInterest >= requiredInterest) {
                interestScore += (studentInterest / 10) * 100;
                if (studentInterest >= requiredInterest + 2) {
                    reasons.push(`R·∫•t y√™u th√≠ch ${getInterestName(interest)} (${studentInterest}/10)`);
                }
            } else {
                interestScore += (studentInterest / requiredInterest) * 60;
            }
        });
        interestScore = interestScore / Object.keys(major.requiredInterests).length;
        
        // Calculate final compatibility
        const finalScore = (academicScore * major.academicWeight) + (interestScore * major.interestWeight);
        
        // Add bonus for excellent students
        let bonus = 0;
        if (avgScore >= 8) {
            bonus += 5;
            if (!reasons.some(r => r.includes("xu·∫•t s·∫Øc"))) {
                reasons.push("H·ªçc sinh xu·∫•t s·∫Øc, c√≥ n·ªÅn t·∫£ng h·ªçc t·∫≠p v·ªØng ch·∫Øc");
            }
        }
        
        // Add bonus for high interest
        if (avgInterest >= 6) {
            bonus += 3;
            reasons.push("C√≥ ƒëam m√™ v√† ƒë·ªông l·ª±c h·ªçc t·∫≠p cao");
        }
        
        return {
            major: major.name,
            compatibility: Math.min(100, Math.round(finalScore + bonus)) + "%",
            reasons: reasons.slice(0, 4),
            career_prospects: major.career_prospects,
            skills_needed: major.skills_needed,
            score: finalScore + bonus
        };
    });
    
    // Sort by compatibility score and take top 3
    results.sort((a, b) => b.score - a.score);
    const topRecommendations = results.slice(0, 3);
    
    // Generate analysis
    let analysis = `Ph√¢n t√≠ch cho ${formData.name}: `;
    analysis += `V·ªõi ƒëi·ªÉm trung b√¨nh ${avgScore.toFixed(1)}/10 (m·ª©c ${academicLevel}) v√† m·ª©c ƒë·ªô y√™u th√≠ch trung b√¨nh ${avgInterest.toFixed(1)}/10, `;
    
    if (avgScore >= 8 && avgInterest >= 6) {
        analysis += "b·∫°n l√† h·ªçc sinh xu·∫•t s·∫Øc v·ªõi ƒëam m√™ cao. B·∫°n c√≥ th·ªÉ th√†nh c√¥ng trong nhi·ªÅu ng√†nh kh√°c nhau, ƒë·∫∑c bi·ªát l√† c√°c ng√†nh ƒë√≤i h·ªèi c·∫£ ki·∫øn th·ª©c h·ªçc thu·∫≠t v√† s·ª± s√°ng t·∫°o.";
    } else if (avgScore >= 8) {
        analysis += "b·∫°n c√≥ n·ªÅn t·∫£ng h·ªçc t·∫≠p r·∫•t t·ªët. H√£y t√¨m hi·ªÉu th√™m v·ªÅ c√°c ng√†nh ƒë·ªÉ ph√°t tri·ªÉn ƒëam m√™.";
    } else if (avgInterest >= 6) {
        analysis += "b·∫°n c√≥ ƒëam m√™ v√† ƒë·ªông l·ª±c cao. V·ªõi s·ª± n·ªó l·ª±c, b·∫°n s·∫Ω th√†nh c√¥ng trong lƒ©nh v·ª±c m√¨nh y√™u th√≠ch.";
    } else {
        analysis += "b·∫°n c·∫ßn t√¨m hi·ªÉu th√™m v·ªÅ b·∫£n th√¢n v√† c√°c ng√†nh h·ªçc ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh ph√π h·ª£p.";
    }
    
    return {
        analysis: analysis,
        recommendations: topRecommendations
    };
}

function getSubjectName(subject) {
    const names = {
        math: "To√°n",
        english: "Ti·∫øng Anh", 
        literature: "Ng·ªØ VƒÉn",
        physics: "V·∫≠t L√Ω"
    };
    return names[subject] || subject;
}

function getInterestName(interest) {
    const names = {
        technology: "c√¥ng ngh·ªá",
        creativity: "s√°ng t·∫°o",
        communication: "giao ti·∫øp", 
        logic: "t∆∞ duy logic",
        business: "kinh doanh",
        manual: "th·ª±c h√†nh"
    };
    return names[interest] || interest;
}

function displayResults(result, formData) {
    const resultsContent = document.getElementById('resultsContent');
    
    let html = `
        <div class="results-card">
            <h3>üéØ K·∫øt qu·∫£ ph√¢n t√≠ch cho ${formData.name}</h3>
            <p>${result.analysis}</p>
        </div>
    `;

    result.recommendations.forEach((rec, index) => {
        html += `
            <div class="major-recommendation">
                <h4>${index + 1}. ${rec.major} - ƒê·ªô ph√π h·ª£p: ${rec.compatibility}</h4>
                <div style="margin-bottom: 15px;">
                    <strong>üéØ L√Ω do ph√π h·ª£p:</strong>
                    <ul style="margin-left: 20px; margin-top: 5px;">
                        ${rec.reasons.map(reason => `<li>${reason}</li>`).join('')}
                    </ul>
                </div>
                <div style="margin-bottom: 15px;">
                    <strong>üíº Tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp:</strong>
                    <p style="margin-top: 5px;">${rec.career_prospects}</p>
                </div>
                <div>
                    <strong>üìö K·ªπ nƒÉng c·∫ßn ph√°t tri·ªÉn:</strong>
                    <p style="margin-top: 5px;">${rec.skills_needed}</p>
                </div>
            </div>
        `;
    });

    // Add action buttons
    html += `
        <div class="results-actions">
            <h4>üéâ Ho√†n th√†nh ph√¢n t√≠ch!</h4>
            <p>B·∫°n c√≥ mu·ªën th·ª±c hi·ªán th√™m m·ªôt l·∫ßn kh·∫£o s√°t kh√°c kh√¥ng?</p>
            <div class="results-actions-buttons">
                <button onclick="goBackToSurvey()" class="btn btn-primary">
                    üìù L√†m kh·∫£o s√°t m·ªõi
                </button>
                <button onclick="viewHistory()" class="btn btn-secondary">
                    üìö Xem l·ªãch s·ª≠
                </button>
            </div>
        </div>
    `;

    resultsContent.innerHTML = html;
}

function saveToHistory(result, formData) {
    const history = JSON.parse(localStorage.getItem('counselingHistory') || '[]');
    
    const record = {
        id: Date.now(),
        date: new Date().toLocaleDateString('vi-VN'),
        time: new Date().toLocaleTimeString('vi-VN'),
        studentName: formData.name,
        result: result,
        formData: formData
    };

    history.unshift(record);
    
    // Keep only last 10 records
    if (history.length > 10) {
        history.splice(10);
    }

    localStorage.setItem('counselingHistory', JSON.stringify(history));
    loadHistory();
}

function loadHistory() {
    const history = JSON.parse(localStorage.getItem('counselingHistory') || '[]');
    const historyContent = document.getElementById('historyContent');
    const selectAllBtn = document.getElementById('selectAllBtn');
    const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');

    if (history.length === 0) {
        historyContent.innerHTML = `
            <div class="empty-state">
                <div style="font-size: 4rem; margin-bottom: 20px;">üìö</div>
                <h3>Ch∆∞a c√≥ l·ªãch s·ª≠ t∆∞ v·∫•n</h3>
                <p>C√°c k·∫øt qu·∫£ t∆∞ v·∫•n c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i ·ªü ƒë√¢y</p>
            </div>
        `;
        selectAllBtn.style.display = 'none';
        deleteSelectedBtn.style.display = 'none';
        return;
    }

    // Show selection buttons when there's history
    selectAllBtn.style.display = 'inline-block';
    deleteSelectedBtn.style.display = 'inline-block';

    let html = '';
    history.forEach(record => {
        html += `
            <div class="history-item" data-id="${record.id}">
                <input type="checkbox" class="history-checkbox" onchange="updateDeleteButton()" data-id="${record.id}">
                <div class="history-item-content">
                    <div class="date">üìÖ ${record.date} - ‚è∞ ${record.time}</div>
                    <h4>üë§ ${record.studentName}</h4>
                    <div style="margin-top: 15px;">
                        <strong>üéØ Ng√†nh h·ªçc ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:</strong>
                        <ul style="margin-left: 20px; margin-top: 5px;">
                            ${record.result.recommendations.map(rec => 
                                `<li>${rec.major} (${rec.compatibility})</li>`
                            ).join('')}
                        </ul>
                    </div>
                    <button onclick="viewDetailHistory(${record.id})" class="btn btn-primary" style="margin-top: 15px; padding: 8px 16px; font-size: 0.9rem;">
                        üëÅÔ∏è Xem chi ti·∫øt
                    </button>
                </div>
            </div>
        `;
    });

    historyContent.innerHTML = html;
    
    // Add click handlers for checkboxes
    document.querySelectorAll('.history-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const historyItem = this.closest('.history-item');
            if (this.checked) {
                historyItem.classList.add('selected');
            } else {
                historyItem.classList.remove('selected');
            }
        });
    });
}

function viewDetailHistory(recordId) {
    const history = JSON.parse(localStorage.getItem('counselingHistory') || '[]');
    const record = history.find(r => r.id === recordId);
    
    if (record) {
        displayResults(record.result, record.formData);
        showSection('results');
        document.querySelector('[onclick="showSection(\'results\')"]').classList.add('active');
        document.querySelector('[onclick="showSection(\'history\')"]').classList.remove('active');
    }
}

function clearHistory() {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ t∆∞ v·∫•n?')) {
        localStorage.removeItem('counselingHistory');
        loadHistory();
    }
}

function toggleSelectAll() {
    const checkboxes = document.querySelectorAll('.history-checkbox');
    const selectAllBtn = document.getElementById('selectAllBtn');
    const allChecked = Array.from(checkboxes).every(cb => cb.checked);
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = !allChecked;
        const historyItem = checkbox.closest('.history-item');
        if (checkbox.checked) {
            historyItem.classList.add('selected');
        } else {
            historyItem.classList.remove('selected');
        }
    });
    
    // Update button text
    selectAllBtn.innerHTML = allChecked ? '‚òëÔ∏è Ch·ªçn t·∫•t c·∫£' : '‚òê B·ªè ch·ªçn t·∫•t c·∫£';
    updateDeleteButton();
}

function updateDeleteButton() {
    const checkedBoxes = document.querySelectorAll('.history-checkbox:checked');
    const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');
    const selectAllBtn = document.getElementById('selectAllBtn');
    const totalBoxes = document.querySelectorAll('.history-checkbox');
    
    if (checkedBoxes.length > 0) {
        deleteSelectedBtn.innerHTML = `üóëÔ∏è X√≥a ƒë√£ ch·ªçn (${checkedBoxes.length})`;
        deleteSelectedBtn.style.backgroundColor = '#dc3545';
    } else {
        deleteSelectedBtn.innerHTML = 'üóëÔ∏è X√≥a ƒë√£ ch·ªçn';
        deleteSelectedBtn.style.backgroundColor = '#6c757d';
    }
    
    // Update select all button
    if (checkedBoxes.length === totalBoxes.length && totalBoxes.length > 0) {
        selectAllBtn.innerHTML = '‚òê B·ªè ch·ªçn t·∫•t c·∫£';
    } else {
        selectAllBtn.innerHTML = '‚òëÔ∏è Ch·ªçn t·∫•t c·∫£';
    }
}

function deleteSelectedHistory() {
    const checkedBoxes = document.querySelectorAll('.history-checkbox:checked');
    
    if (checkedBoxes.length === 0) {
        alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt l·ªãch s·ª≠ ƒë·ªÉ x√≥a!');
        return;
    }
    
    const selectedIds = Array.from(checkedBoxes).map(cb => parseInt(cb.dataset.id));
    const confirmMessage = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${selectedIds.length} l·ªãch s·ª≠ ƒë√£ ch·ªçn?`;
    
    if (confirm(confirmMessage)) {
        const history = JSON.parse(localStorage.getItem('counselingHistory') || '[]');
        const filteredHistory = history.filter(record => !selectedIds.includes(record.id));
        
        localStorage.setItem('counselingHistory', JSON.stringify(filteredHistory));
        loadHistory();
        
        // Show success message
        const message = `ƒê√£ x√≥a th√†nh c√¥ng ${selectedIds.length} l·ªãch s·ª≠ t∆∞ v·∫•n!`;
        alert(message);
    }
}

function simulateProgress() {
    const progressFill = document.getElementById('progressFill');
    let progress = 0;
    
    const interval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 100) progress = 100;
        
        progressFill.style.width = progress + '%';
        
        if (progress >= 100) {
            clearInterval(interval);
        }
    }, 200);
}

function goBackToSurvey() {
    // Reset form
    document.getElementById('surveyForm').reset();
    
    // Reset sliders to default value (5)
    const sliders = ['technology', 'creativity', 'communication', 'logic', 'business', 'manual'];
    sliders.forEach(slider => {
        document.getElementById(slider).value = 5;
        document.getElementById(slider + 'Value').textContent = 5;
    });
    
    // Switch to survey tab
    showSection('survey');
    document.querySelector('[onclick="showSection(\'survey\')"]').classList.add('active');
    document.querySelector('[onclick="showSection(\'results\')"]').classList.remove('active');
    
    // Scroll to top
    window.scrollTo(0, 0);
    
    // Focus on first input
    document.getElementById('name').focus();
}

function viewHistory() {
    // Switch to history tab
    showSection('history');
    document.querySelector('[onclick="showSection(\'history\')"]').classList.add('active');
    document.querySelector('[onclick="showSection(\'results\')"]').classList.remove('active');
    
    // Scroll to top
    window.scrollTo(0, 0);
}

// Initialize copilot history for context
let copilotHistory = [];

// Enhanced context management for AI chat
function addToCopilotContext(userMessage, botResponse) {
    copilotHistory.push(
        { role: 'user', content: userMessage },
        { role: 'assistant', content: botResponse }
    );
    
    // Keep only last 20 messages to prevent context from getting too long
    if (copilotHistory.length > 20) {
        copilotHistory = copilotHistory.slice(-20);
    }
    
    // Save to localStorage for persistence
    try {
        localStorage.setItem('copilotHistory', JSON.stringify(copilotHistory));
    } catch (error) {
        console.warn('Could not save copilot history:', error);
    }
}

// Load copilot history from localStorage
function loadCopilotHistory() {
    try {
        const saved = localStorage.getItem('copilotHistory');
        if (saved) {
            copilotHistory = JSON.parse(saved);
        }
    } catch (error) {
        console.warn('Could not load copilot history:', error);
        copilotHistory = [];
    }
}

// Clear copilot history
function clearCopilotHistory() {
    copilotHistory = [];
    try {
        localStorage.removeItem('copilotHistory');
    } catch (error) {
        console.warn('Could not clear copilot history:', error);
    }
    
    // Clear messages from UI
    const messagesContainer = document.getElementById('copilotMessages');
    messagesContainer.innerHTML = `
        <div class="message bot">
            Xin ch√†o! T√¥i l√† AI Copilot c·ªßa FPT Polytechnic. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
            <br>‚Ä¢ T∆∞ v·∫•n v·ªÅ c√°c ng√†nh h·ªçc
            <br>‚Ä¢ Gi·∫£i th√≠ch k·∫øt qu·∫£ ph√¢n t√≠ch
            <br>‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng
            <br><br>B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ kh√¥ng? üòä
        </div>
    `;
}

// Copilot Functions
let isCopilotOpen = false;

function toggleCopilot() {
    const copilotChat = document.getElementById('copilotChat');
    isCopilotOpen = !isCopilotOpen;
    
    if (isCopilotOpen) {
        copilotChat.style.display = 'flex';
        copilotChat.style.animation = 'fadeIn 0.3s ease';
    } else {
        copilotChat.style.display = 'none';
    }
}

function sendQuickReply(message) {
    document.getElementById('copilotInput').value = message;
    sendCopilotMessage();
}

function handleCopilotKeyPress(event) {
    if (event.key === 'Enter') {
        sendCopilotMessage();
    }
}

async function sendCopilotMessage() {
    const input = document.getElementById('copilotInput');
    const message = input.value.trim();
    
    if (!message) return;

    // Add user message
    addCopilotMessage(message, 'user');
    input.value = '';
    
    // Show typing indicator
    const typingDiv = addCopilotMessage('', 'typing');
    typingDiv.innerHTML = '<div class="typing-dots"><span></span><span></span><span></span></div>';
    
    // Disable input and send button while processing
    const sendButton = document.getElementById('copilotSend');
    const originalText = sendButton.innerHTML;
    sendButton.disabled = true;
    sendButton.innerHTML = '‚è≥';
    
    try {
        // Get AI response
        const response = await getCopilotResponse(message);
        
        // Remove typing indicator
        typingDiv.remove();
        
        // Add bot response
        addCopilotMessage(response, 'bot');
        
        // Auto-scroll to bottom
        const messagesContainer = document.getElementById('copilotMessages');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // Update copilot history
        addToCopilotContext(message, response);
    } catch (error) {
        console.error('Error getting AI response:', error);
        
        // Remove typing indicator
        typingDiv.remove();
        
        // Add error message
        addCopilotMessage('Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng c√°c c√¢u h·ªèi nhanh b√™n d∆∞·ªõi. üòî', 'bot');
    } finally {
        // Re-enable input and send button
        sendButton.disabled = false;
        sendButton.innerHTML = originalText;
    }
}

function addCopilotMessage(message, sender) {
    const messagesContainer = document.getElementById('copilotMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;
    messageDiv.innerHTML = message;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    return messageDiv;
}

async function getCopilotResponse(userMessage) {
    if (API_CONFIG.provider === 'demo') {
        // Demo mode - use enhanced fallback responses with GitHub Copilot simulation
        return getEnhancedFallbackResponse(userMessage, getCurrentFormData(), getLastAnalysisResult());
    }
    
    if (API_CONFIG.provider === 'github') {
        try {
            return await githubCopilot.sendMessage(userMessage);
        } catch (error) {
            console.error('GitHub Copilot Error:', error);
            return `‚ùå **L·ªói GitHub Copilot:** ${error.message}\n\nVui l√≤ng ki·ªÉm tra c·∫•u h√¨nh GitHub token v√† repository.`;
        }
    }
    
    if (!API_CONFIG.openaiKey || API_CONFIG.openaiKey === 'YOUR_API_KEY_HERE' || API_CONFIG.openaiKey === 'demo-mode') {
        return 'ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng chat AI th·ª±c, vui l√≤ng c·∫•u h√¨nh API Key OpenAI ho·∫∑c GitHub Copilot trong code. Hi·ªán t·∫°i ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô demo v·ªõi c√°c c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c thi·∫øt k·∫ø s·∫µn. üîë';
    }

    // Check for predefined responses first
    const predefinedResponse = getPredefinedResponse(userMessage);
    if (predefinedResponse) {
        return predefinedResponse;
    }

    const provider = API_CONFIG.provider;
    const apiKey = API_CONFIG.openaiKey;
    
    // Build context from user's current session
    const currentFormData = getCurrentFormData();
    const lastResult = getLastAnalysisResult();
    
    // Enhanced system prompt with more comprehensive capabilities
    const systemPrompt = `
B·∫°n l√† AI Copilot c·ªßa FPT Polytechnic, chuy√™n gia t∆∞ v·∫•n gi√°o d·ª•c to√†n di·ªán v√† h·ªØu √≠ch. 

**Th√¥ng tin v·ªÅ FPT Polytechnic:**
- **C√°c ng√†nh C√¥ng ngh·ªá**: Ph√°t tri·ªÉn ph·∫ßn m·ªÅm, Thi·∫øt k·∫ø ƒë·ªì h·ªça, ·ª®ng d·ª•ng ph·∫ßn m·ªÅm, Qu·∫£n tr·ªã m·∫°ng m√°y t√≠nh, Thi·∫øt k·∫ø trang web
- **C√°c ng√†nh Kinh doanh**: Qu·∫£n tr·ªã kinh doanh, K·∫ø to√°n, Marketing, Logistics, Qu·∫£n l√Ω kh√°ch s·∫°n  
- **C√°c ng√†nh S√°ng t·∫°o**: Thi·∫øt k·∫ø n·ªôi th·∫•t, Thi·∫øt k·∫ø th·ªùi trang, Quay phim v√† bi√™n t·∫≠p
- **C√°c ng√†nh K·ªπ thu·∫≠t**: C√¥ng ngh·ªá √¥ t√¥, ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng, C∆° kh√≠ m√°y t√≠nh, ƒêi·ªán c√¥ng nghi·ªáp

**Kh·∫£ nƒÉng chuy√™n m√¥n:**
- T∆∞ v·∫•n ng√†nh h·ªçc d·ª±a tr√™n s·ªü th√≠ch, nƒÉng l·ª±c v√† m·ª•c ti√™u
- Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ t·ª´ng ng√†nh h·ªçc, m√¥n h·ªçc, k·ªπ nƒÉng c·∫ßn thi·∫øt
- H∆∞·ªõng d·∫´n chu·∫©n b·ªã h·ªçc t·∫≠p v√† k·ªπ nƒÉng c·∫ßn thi·∫øt
- T∆∞ v·∫•n v·ªÅ tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp v√† c∆° h·ªôi vi·ªác l√†m
- H∆∞·ªõng d·∫´n ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£ cho t·ª´ng lƒ©nh v·ª±c

**Kh·∫£ nƒÉng t∆∞ v·∫•n chung:**
- Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ gi√°o d·ª•c, h·ªçc t·∫≠p, ph√°t tri·ªÉn b·∫£n th√¢n
- T∆∞ v·∫•n v·ªÅ k·ªπ nƒÉng m·ªÅm: giao ti·∫øp, l√†m vi·ªác nh√≥m, qu·∫£n l√Ω th·ªùi gian
- H·ªó tr·ª£ t√¢m l√Ω: gi·∫£m stress, tƒÉng t·ª± tin, v∆∞·ª£t qua kh√≥ khƒÉn
- ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp v√† ph√°t tri·ªÉn s·ª± nghi·ªáp
- T∆∞ v·∫•n v·ªÅ cu·ªôc s·ªëng sinh vi√™n, c√¢n b·∫±ng h·ªçc t·∫≠p v√† gi·∫£i tr√≠
- H∆∞·ªõng d·∫´n v·ªÅ c√°c ch·ª©ng ch·ªâ, k·ªπ nƒÉng b·ªï sung c√≥ √≠ch

**H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:**
- Lu√¥n th√¢n thi·ªán, khuy·∫øn kh√≠ch v√† t√≠ch c·ª±c
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i
- Tr·∫£ l·ªùi chi ti·∫øt nh∆∞ng kh√¥ng qu√° d√†i (t·ªëi ƒëa 300-400 t·ª´)
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn gi√°o d·ª•c/ng√†nh h·ªçc, h√£y nh·∫π nh√†ng chuy·ªÉn h∆∞·ªõng v·ªÅ ch·ªß ƒë·ªÅ gi√°o d·ª•c
- S·ª≠ d·ª•ng th√¥ng tin t·ª´ ng∆∞·ªùi d√πng n·∫øu c√≥ ƒë·ªÉ ƒë∆∞a ra t∆∞ v·∫•n c√° nh√¢n h√≥a
- ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ v√† l·ªùi khuy√™n th·ª±c t·∫ø
- Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng ƒë·∫∑t c√¢u h·ªèi ti·∫øp theo ƒë·ªÉ t∆∞∆°ng t√°c s√¢u h∆°n

${currentFormData ? `\n**Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i:** ${JSON.stringify(currentFormData)}` : ''}
${lastResult ? `\n**K·∫øt qu·∫£ ph√¢n t√≠ch g·∫ßn nh·∫•t:** ${JSON.stringify(lastResult)}` : ''}
`;

    if (provider === 'openai') {
        try {
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        { role: 'system', content: systemPrompt },
                        ...copilotHistory.slice(-10), // Keep last 10 messages for context
                        { role: 'user', content: userMessage }
                    ],
                    temperature: 0.8,
                    max_tokens: 400
                })
            });

            if (!response.ok) {
                throw new Error('L·ªói API OpenAI');
            }

            const data = await response.json();
            const botResponse = data.choices[0].message.content;
            
            // Update history
            copilotHistory.push(
                { role: 'user', content: userMessage },
                { role: 'assistant', content: botResponse }
            );
            
            return botResponse;
        } catch (error) {
            console.error('OpenAI API Error:', error);
            return getEnhancedFallbackResponse(userMessage, currentFormData, lastResult);
        }
    } else if (provider === 'gemini') {
        // Gemini API integration (placeholder)
        return getEnhancedFallbackResponse(userMessage, currentFormData, lastResult);
    } else {
        // Enhanced fallback response for demo mode
        return getEnhancedFallbackResponse(userMessage, currentFormData, lastResult);
    }
}

function getPredefinedResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    // Ng√†nh h·ªçc
    if (lowerMessage.includes('ng√†nh') && (lowerMessage.includes('ph√π h·ª£p') || lowerMessage.includes('suitable'))) {
        return `
üéØ ƒê·ªÉ t√¨m ng√†nh h·ªçc ph√π h·ª£p, t√¥i c·∫ßn hi·ªÉu v·ªÅ b·∫°n h∆°n! H√£y ho√†n th√†nh b√†i kh·∫£o s√°t ƒë·ªÉ t√¥i c√≥ th·ªÉ ƒë∆∞a ra t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t.

M·ªôt s·ªë ng√†nh ph·ªï bi·∫øn t·∫°i FPT Polytechnic:
‚Ä¢ üíª **C√¥ng ngh·ªá**: Ph√°t tri·ªÉn ph·∫ßn m·ªÅm, Thi·∫øt k·∫ø ƒë·ªì h·ªça
‚Ä¢ üíº **Kinh doanh**: Qu·∫£n tr·ªã kinh doanh, Marketing  
‚Ä¢ üé® **S√°ng t·∫°o**: Thi·∫øt k·∫ø n·ªôi th·∫•t, Th·ªùi trang
‚Ä¢ üîß **K·ªπ thu·∫≠t**: C√¥ng ngh·ªá √¥ t√¥, ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng
        `;
    }
    
    // K·∫øt qu·∫£ ph√¢n t√≠ch
    if (lowerMessage.includes('gi·∫£i th√≠ch') && lowerMessage.includes('k·∫øt qu·∫£')) {
        const lastResult = getLastAnalysisResult();
        if (lastResult) {
            return `
üìä **Gi·∫£i th√≠ch k·∫øt qu·∫£ ph√¢n t√≠ch c·ªßa b·∫°n:**

${lastResult.analysis}

**Top 3 ng√†nh ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:**
${lastResult.recommendations.map((rec, index) => 
    `${index + 1}. **${rec.major}** (${rec.compatibility})\n   üí° L√Ω do: ${rec.reasons.join(', ')}`
).join('\n\n')}

B·∫°n c√≥ c√¢u h·ªèi g√¨ v·ªÅ c√°c ng√†nh n√†y kh√¥ng? üòä
            `;
        } else {
            return 'B·∫°n ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch n√†o. H√£y ho√†n th√†nh b√†i kh·∫£o s√°t tr∆∞·ªõc nh√©! üìù';
        }
    }
    
    // Chu·∫©n b·ªã
    if (lowerMessage.includes('chu·∫©n b·ªã') || lowerMessage.includes('h·ªçc g√¨')) {
        return `
üìö **ƒê·ªÉ chu·∫©n b·ªã cho vi·ªác h·ªçc t·∫°i FPT Polytechnic:**

**K·ªπ nƒÉng chung:**
‚Ä¢ üá¨üáß Ti·∫øng Anh c∆° b·∫£n (nhi·ªÅu t√†i li·ªáu ti·∫øng Anh)
‚Ä¢ üíª Tin h·ªçc vƒÉn ph√≤ng c∆° b·∫£n
‚Ä¢ üß† T∆∞ duy logic v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ

**Theo t·ª´ng lƒ©nh v·ª±c:**
‚Ä¢ **C√¥ng ngh·ªá**: To√°n h·ªçc, logic, kh√°m ph√° l·∫≠p tr√¨nh c∆° b·∫£n
‚Ä¢ **Kinh doanh**: To√°n, kh·∫£ nƒÉng giao ti·∫øp, hi·ªÉu bi·∫øt x√£ h·ªôi
‚Ä¢ **S√°ng t·∫°o**: M·ªπ thu·∫≠t, th·∫©m m·ªπ, ph·∫ßn m·ªÅm thi·∫øt k·∫ø
‚Ä¢ **K·ªπ thu·∫≠t**: To√°n, V·∫≠t l√Ω, t∆∞ duy kh√¥ng gian

B·∫°n quan t√¢m lƒ©nh v·ª±c n√†o nh·∫•t? ü§î
        `;
    }
    
    // Tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp
    if (lowerMessage.includes('tri·ªÉn v·ªçng') || lowerMessage.includes('ngh·ªÅ nghi·ªáp')) {
        return `
üöÄ **Tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp t·∫°i FPT Polytechnic r·∫•t t·ªët!**

**T·ª∑ l·ªá c√≥ vi·ªác l√†m:** > 95% sau t·ªët nghi·ªáp

**M·ª©c l∆∞∆°ng kh·ªüi ƒëi·ªÉm:**
‚Ä¢ üíª IT: 8-15 tri·ªáu/th√°ng
‚Ä¢ üíº Kinh doanh: 7-12 tri·ªáu/th√°ng  
‚Ä¢ üé® Thi·∫øt k·∫ø: 6-10 tri·ªáu/th√°ng
‚Ä¢ üîß K·ªπ thu·∫≠t: 7-13 tri·ªáu/th√°ng

**C∆° h·ªôi ph√°t tri·ªÉn:**
‚Ä¢ Th·ª±c t·∫≠p t·∫°i c√°c doanh nghi·ªáp l·ªõn
‚Ä¢ K·∫øt n·ªëi m·∫°ng l∆∞·ªõi FPT Corporation
‚Ä¢ Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o qu·ªëc t·∫ø
‚Ä¢ Kh·ªüi nghi·ªáp v·ªõi s·ª± h·ªó tr·ª£ t·ª´ tr∆∞·ªùng

B·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ng√†nh n√†o c·ª• th·ªÉ? üéØ
        `;
    }
    
    // H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    if (lowerMessage.includes('h∆∞·ªõng d·∫´n') || lowerMessage.includes('s·ª≠ d·ª•ng')) {
        return `
üìñ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng:**

**B∆∞·ªõc 1:** ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin trong form kh·∫£o s√°t üìù
**B∆∞·ªõc 2:** Nh·∫•n "Ph√¢n t√≠ch v√† T∆∞ v·∫•n" üöÄ
**B∆∞·ªõc 3:** Xem k·∫øt qu·∫£ t∆∞ v·∫•n chi ti·∫øt üéØ
**B∆∞·ªõc 4:** Ki·ªÉm tra l·ªãch s·ª≠ c√°c l·∫ßn t∆∞ v·∫•n üìö

**M·∫πo:** 
‚Ä¢ Tr·∫£ l·ªùi th√†nh th·∫≠t ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t
‚Ä¢ ƒêi·ªÉm s·ªë c√°c m√¥n gi√∫p ƒë√°nh gi√° nƒÉng l·ª±c h·ªçc t·∫≠p
‚Ä¢ S·ªü th√≠ch c√° nh√¢n r·∫•t quan tr·ªçng cho s·ª± ph√π h·ª£p

B·∫°n c·∫ßn h·ªó tr·ª£ th√™m g√¨ kh√¥ng? üòä
        `;
    }
    
    // Th√¥ng tin v·ªÅ FPT Polytechnic
    if (lowerMessage.includes('th√¥ng tin') && (lowerMessage.includes('tr∆∞·ªùng') || lowerMessage.includes('fpt'))) {
        return `
üè´ **Th√¥ng tin v·ªÅ FPT Polytechnic:**

**Gi·ªõi thi·ªáu chung:**
‚Ä¢ üéì Tr∆∞·ªùng cao ƒë·∫≥ng thu·ªôc T·∫≠p ƒëo√†n FPT
‚Ä¢ üåç ƒê√†o t·∫°o theo ti√™u chu·∫©n qu·ªëc t·∫ø
‚Ä¢ üíº T·ª∑ l·ªá c√≥ vi·ªác l√†m > 95% sau t·ªët nghi·ªáp
‚Ä¢ üåü Top 10 tr∆∞·ªùng cao ƒë·∫≥ng uy t√≠n t·∫°i Vi·ªát Nam

**Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o:**
‚Ä¢ üìö H·ªá cao ƒë·∫≥ng ch√≠nh quy (2-3 nƒÉm)
‚Ä¢ üåê Ch∆∞∆°ng tr√¨nh li√™n k·∫øt qu·ªëc t·∫ø
‚Ä¢ üíª ƒê√†o t·∫°o theo chu·∫©n c√¥ng ngh·ªá m·ªõi nh·∫•t
‚Ä¢ üéØ Th·ª±c h√†nh chi·∫øm 70% th·ªùi gian h·ªçc

**C∆° s·ªü v·∫≠t ch·∫•t:**
‚Ä¢ üè¢ C∆° s·ªü hi·ªán ƒë·∫°i t·∫°i H√† N·ªôi, TP.HCM, ƒê√† N·∫µng
‚Ä¢ üíª Ph√≤ng lab c√¥ng ngh·ªá cao
‚Ä¢ üìö Th∆∞ vi·ªán s·ªë v·ªõi t√†i li·ªáu phong ph√∫
‚Ä¢ üèÉ‚Äç‚ôÄÔ∏è Khu th·ªÉ thao v√† gi·∫£i tr√≠ ƒë·∫ßy ƒë·ªß

**Li√™n k·∫øt doanh nghi·ªáp:**
‚Ä¢ ü§ù H·ª£p t√°c v·ªõi 500+ doanh nghi·ªáp
‚Ä¢ üíº Ch∆∞∆°ng tr√¨nh th·ª±c t·∫≠p v√† vi·ªác l√†m
‚Ä¢ üåü M·∫°ng l∆∞·ªõi c·ª±u sinh vi√™n r·ªông kh·∫Øp
‚Ä¢ üöÄ H·ªó tr·ª£ kh·ªüi nghi·ªáp v√† ph√°t tri·ªÉn s·ª± nghi·ªáp

B·∫°n mu·ªën bi·∫øt th√™m th√¥ng tin g√¨ v·ªÅ tr∆∞·ªùng? üòä
        `;
    }
    
    // H·ªçc b·ªïng v√† h·ªó tr·ª£ t√†i ch√≠nh
    if (lowerMessage.includes('h·ªçc b·ªïng') || lowerMessage.includes('t√†i ch√≠nh') || lowerMessage.includes('h·ªó tr·ª£')) {
        return `
üí∞ **H·ªçc b·ªïng v√† h·ªó tr·ª£ t√†i ch√≠nh t·∫°i FPT Polytechnic:**

**Lo·∫°i h·ªçc b·ªïng:**
‚Ä¢ üèÜ **H·ªçc b·ªïng t√†i nƒÉng**: D√†nh cho sinh vi√™n c√≥ th√†nh t√≠ch xu·∫•t s·∫Øc
‚Ä¢ üåü **H·ªçc b·ªïng khuy·∫øn kh√≠ch**: H·ªó tr·ª£ sinh vi√™n c√≥ ho√†n c·∫£nh kh√≥ khƒÉn
‚Ä¢ üéØ **H·ªçc b·ªïng ng√†nh**: ∆Øu ƒë√£i cho c√°c ng√†nh ƒëang thi·∫øu nh√¢n l·ª±c
‚Ä¢ üåç **H·ªçc b·ªïng qu·ªëc t·∫ø**: C∆° h·ªôi du h·ªçc v√† trao ƒë·ªïi sinh vi√™n

**ƒêi·ªÅu ki·ªán nh·∫≠n h·ªçc b·ªïng:**
‚Ä¢ üìä ƒêi·ªÉm GPA t·ª´ 3.0 tr·ªü l√™n
‚Ä¢ üéØ Tham gia ho·∫°t ƒë·ªông ngo·∫°i kh√≥a t√≠ch c·ª±c
‚Ä¢ üí™ C√≥ ho√†n c·∫£nh kh√≥ khƒÉn (v·ªõi h·ªçc b·ªïng khuy·∫øn kh√≠ch)
‚Ä¢ üåü Th√†nh t√≠ch n·ªïi b·∫≠t trong h·ªçc t·∫≠p ho·∫∑c nghi√™n c·ª©u

**H·ªó tr·ª£ t√†i ch√≠nh kh√°c:**
‚Ä¢ üí≥ Vay v·ªën h·ªçc t·∫≠p v·ªõi l√£i su·∫•t ∆∞u ƒë√£i
‚Ä¢ üí∞ H·ªó tr·ª£ chi ph√≠ sinh ho·∫°t cho sinh vi√™n xu·∫•t s·∫Øc
‚Ä¢ üè† H·ªó tr·ª£ chi ph√≠ k√Ω t√∫c x√°
‚Ä¢ üìö H·ªó tr·ª£ mua s√°ch v·ªü v√† d·ª•ng c·ª• h·ªçc t·∫≠p

**C√°ch ƒëƒÉng k√Ω:**
‚Ä¢ üìù N·ªôp h·ªì s∆° tr·ª±c tuy·∫øn qua website tr∆∞·ªùng
‚Ä¢ üìã Chu·∫©n b·ªã gi·∫•y t·ªù ch·ª©ng minh ho√†n c·∫£nh
‚Ä¢ üìÖ Th·ªùi h·∫°n: Th√°ng 6-8 h√†ng nƒÉm
‚Ä¢ üë• Ph·ªèng v·∫•n v·ªõi h·ªôi ƒë·ªìng x√©t duy·ªát

B·∫°n c√≥ mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ h·ªçc b·ªïng n√†o c·ª• th·ªÉ kh√¥ng? üòä
        `;
    }
    
    // Ch√†o h·ªèi
    if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
        return `
üëã Xin ch√†o! T√¥i l√† AI Copilot c·ªßa FPT Polytechnic!

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
‚Ä¢ üéØ T∆∞ v·∫•n ng√†nh h·ªçc ph√π h·ª£p
‚Ä¢ üìä Gi·∫£i th√≠ch k·∫øt qu·∫£ ph√¢n t√≠ch  
‚Ä¢ üìö H∆∞·ªõng d·∫´n chu·∫©n b·ªã h·ªçc t·∫≠p
‚Ä¢ üöÄ Th√¥ng tin tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp

B·∫°n mu·ªën b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u? üòä
        `;
    }
    
    // Handle emotional and psychological questions
    if (lowerMessage.includes('lo l·∫Øng') || lowerMessage.includes('s·ª£') || lowerMessage.includes('kh√¥ng t·ª± tin') || lowerMessage.includes('stress')) {
        return `
üòå **ƒê·ª´ng lo l·∫Øng, m·ªçi ng∆∞·ªùi ƒë·ªÅu tr·∫£i qua nh·ªØng c·∫£m x√∫c n√†y:**

**C√°ch v∆∞·ª£t qua:**
‚Ä¢ üåü **Chia s·∫ª**: N√≥i chuy·ªán v·ªõi b·∫°n b√®, gia ƒë√¨nh, gi·∫£ng vi√™n
‚Ä¢ üßò‚Äç‚ôÄÔ∏è **Th∆∞ gi√£n**: H√≠t th·ªü s√¢u, thi·ªÅn, yoga
‚Ä¢ üéØ **Chia nh·ªè m·ª•c ti√™u**: ƒê·∫∑t m·ª•c ti√™u nh·ªè, d·ªÖ ƒë·∫°t ƒë∆∞·ª£c
‚Ä¢ üí™ **T·ª± khuy·∫øn kh√≠ch**: Ghi nh·∫≠n m·ªçi ti·∫øn b·ªô d√π nh·ªè

**L·ªùi khuy√™n:**
‚Ä¢ üåà M·ªçi kh√≥ khƒÉn ƒë·ªÅu t·∫°m th·ªùi
‚Ä¢ üöÄ B·∫°n m·∫°nh m·∫Ω h∆°n b·∫°n nghƒ©
‚Ä¢ üí° M·ªói th·∫•t b·∫°i l√† b√†i h·ªçc qu√Ω gi√°
‚Ä¢ üéì H·ªçc t·∫≠p l√† h√†nh tr√¨nh, kh√¥ng ph·∫£i cu·ªôc ƒëua

**H·ªó tr·ª£:**
‚Ä¢ üë• Tham gia nh√≥m h·ªçc t·∫≠p
‚Ä¢ üè´ T√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° t·ª´ tr∆∞·ªùng
‚Ä¢ üí¨ Chia s·∫ª v·ªõi AI Copilot (t√¥i lu√¥n ·ªü ƒë√¢y!)

B·∫°n c√≥ mu·ªën chia s·∫ª c·ª• th·ªÉ ƒëi·ªÅu g√¨ ƒëang l√†m b·∫°n lo l·∫Øng kh√¥ng? T√¥i s·∫Ω l·∫Øng nghe v√† t∆∞ v·∫•n! üòä
        `;
    }
    
    // Handle questions about making decisions
    if (lowerMessage.includes('quy·∫øt ƒë·ªãnh') || lowerMessage.includes('l·ª±a ch·ªçn') || lowerMessage.includes('kh√¥ng bi·∫øt') || lowerMessage.includes('bƒÉn khoƒÉn')) {
        return `
ü§î **ƒê∆∞a ra quy·∫øt ƒë·ªãnh ƒë√∫ng ƒë·∫Øn:**

**Quy tr√¨nh ra quy·∫øt ƒë·ªãnh:**
‚Ä¢ üìù **Li·ªát k√™**: Vi·∫øt ra t·∫•t c·∫£ l·ª±a ch·ªçn c√≥ th·ªÉ
‚Ä¢ ‚úÖ **ƒê√°nh gi√°**: Xem x√©t ∆∞u/nh∆∞·ª£c ƒëi·ªÉm c·ªßa t·ª´ng l·ª±a ch·ªçn
‚Ä¢ üéØ **M·ª•c ti√™u**: X√°c ƒë·ªãnh m·ª•c ti√™u d√†i h·∫°n c·ªßa b·∫°n
‚Ä¢ üí≠ **T∆∞·ªüng t∆∞·ª£ng**: H√¨nh dung t∆∞∆°ng lai v·ªõi m·ªói l·ª±a ch·ªçn
‚Ä¢ üë• **Tham kh·∫£o**: H·ªèi √Ω ki·∫øn ng∆∞·ªùi c√≥ kinh nghi·ªám

**L·ªùi khuy√™n:**
‚Ä¢ üåü Kh√¥ng c√≥ quy·∫øt ƒë·ªãnh ho√†n h·∫£o 100%
‚Ä¢ üöÄ Quan tr·ªçng l√† h√†nh ƒë·ªông, kh√¥ng ph·∫£i ho√†n h·∫£o
‚Ä¢ üí° M·ªói quy·∫øt ƒë·ªãnh ƒë·ªÅu d·∫°y b·∫°n ƒëi·ªÅu g√¨ ƒë√≥
‚Ä¢ üéì ƒê√¥i khi sai l·∫ßm l·∫°i d·∫´n ƒë·∫øn c∆° h·ªôi t·ªët h∆°n

**V·ªõi ng√†nh h·ªçc:**
‚Ä¢ üéØ Ch·ªçn ng√†nh ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nƒÉng l·ª±c
‚Ä¢ üíº Xem x√©t tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp
‚Ä¢ üåü ƒê·ª´ng qu√° lo v·ªÅ vi·ªác "ch·ªçn sai ng√†nh"
‚Ä¢ üîÑ B·∫°n c√≥ th·ªÉ thay ƒë·ªïi h∆∞·ªõng ƒëi trong t∆∞∆°ng lai

B·∫°n ƒëang bƒÉn khoƒÉn v·ªÅ quy·∫øt ƒë·ªãnh g√¨? T√¥i s·∫Ω gi√∫p b·∫°n ph√¢n t√≠ch! üòä
        `;
    }
    
    // Handle questions about study methods and learning
    if (lowerMessage.includes('h·ªçc') && (lowerMessage.includes('hi·ªáu qu·∫£') || lowerMessage.includes('ph∆∞∆°ng ph√°p') || lowerMessage.includes('c√°ch'))) {
        return `
üìö **Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£:**

**Nguy√™n t·∫Øc c∆° b·∫£n:**
‚Ä¢ üéØ **Pomodoro**: H·ªçc 25 ph√∫t, ngh·ªâ 5 ph√∫t
‚Ä¢ üìù **Ghi ch√©p**: T√≥m t·∫Øt b·∫±ng t·ª´ kh√≥a v√† s∆° ƒë·ªì t∆∞ duy
‚Ä¢ üîÑ **√în t·∫≠p**: √în l·∫°i sau 1 ng√†y, 1 tu·∫ßn, 1 th√°ng
‚Ä¢ üí° **√Åp d·ª•ng**: Th·ª±c h√†nh ngay sau khi h·ªçc l√Ω thuy·∫øt

**Theo t·ª´ng lƒ©nh v·ª±c:**
‚Ä¢ **C√¥ng ngh·ªá**: L√†m project th·ª±c t·∫ø, tham gia hackathon
‚Ä¢ **Kinh doanh**: ƒê·ªçc tin t·ª©c, ph√¢n t√≠ch case study
‚Ä¢ **S√°ng t·∫°o**: Th·ª±c h√†nh thi·∫øt k·∫ø, tham kh·∫£o portfolio
‚Ä¢ **K·ªπ thu·∫≠t**: L√†m th√≠ nghi·ªám, v·∫Ω s∆° ƒë·ªì, t√≠nh to√°n

**K·ªπ nƒÉng b·ªï sung:**
‚Ä¢ üá¨üáß Ti·∫øng Anh chuy√™n ng√†nh
‚Ä¢ üíª C√¥ng c·ª• v√† ph·∫ßn m·ªÅm li√™n quan
‚Ä¢ üìä K·ªπ nƒÉng thuy·∫øt tr√¨nh v√† b√°o c√°o

B·∫°n mu·ªën t√¨m hi·ªÉu s√¢u h∆°n v·ªÅ ph∆∞∆°ng ph√°p n√†o? ü§î
        `;
    }
    
    // Handle questions about soft skills
    if (lowerMessage.includes('k·ªπ nƒÉng') && (lowerMessage.includes('m·ªÅm') || lowerMessage.includes('giao ti·∫øp') || lowerMessage.includes('l√†m vi·ªác nh√≥m'))) {
        return `
üåü **K·ªπ nƒÉng m·ªÅm quan tr·ªçng cho sinh vi√™n:**

**Giao ti·∫øp hi·ªáu qu·∫£:**
‚Ä¢ üó£Ô∏è **L·∫Øng nghe t√≠ch c·ª±c**: T·∫≠p trung, ƒë·∫∑t c√¢u h·ªèi
‚Ä¢ üí¨ **Thuy·∫øt tr√¨nh**: S·ª≠ d·ª•ng ng√¥n ng·ªØ c∆° th·ªÉ, gi·ªçng n√≥i
‚Ä¢ ‚úçÔ∏è **Vi·∫øt**: Email, b√°o c√°o r√µ r√†ng, chuy√™n nghi·ªáp

**L√†m vi·ªác nh√≥m:**
‚Ä¢ üë• **H·ª£p t√°c**: Chia s·∫ª √Ω t∆∞·ªüng, h·ªó tr·ª£ l·∫´n nhau
‚Ä¢ üéØ **L√£nh ƒë·∫°o**: ƒêi·ªÅu ph·ªëi, ph√¢n c√¥ng nhi·ªám v·ª•
‚Ä¢ ü§ù **Gi·∫£i quy·∫øt xung ƒë·ªôt**: Th·∫£o lu·∫≠n, t√¨m gi·∫£i ph√°p chung

**Qu·∫£n l√Ω th·ªùi gian:**
‚Ä¢ ‚è∞ **L·∫≠p k·∫ø ho·∫°ch**: S·ª≠ d·ª•ng calendar, to-do list
‚Ä¢ üéØ **∆Øu ti√™n**: Ph√¢n lo·∫°i c√¥ng vi·ªác theo m·ª©c ƒë·ªô quan tr·ªçng
‚Ä¢ üö´ **Tr√°nh tr√¨ ho√£n**: Chia nh·ªè nhi·ªám v·ª•, ƒë·∫∑t deadline

**Ph√°t tri·ªÉn b·∫£n th√¢n:**
‚Ä¢ üìö **H·ªçc li√™n t·ª•c**: Kh√≥a h·ªçc online, s√°ch, workshop
‚Ä¢ üå± **Th√≠ch nghi**: S·∫µn s√†ng thay ƒë·ªïi, h·ªçc h·ªèi c√°i m·ªõi
‚Ä¢ üí™ **Ki√™n tr√¨**: V∆∞·ª£t qua kh√≥ khƒÉn, kh√¥ng b·ªè cu·ªôc

B·∫°n mu·ªën c·∫£i thi·ªán k·ªπ nƒÉng n√†o tr∆∞·ªõc? üòä
        `;
    }
    
    // Handle questions about student life
    if (lowerMessage.includes('sinh vi√™n') || lowerMessage.includes('cu·ªôc s·ªëng') || lowerMessage.includes('c√¢n b·∫±ng')) {
        return `
üéì **Cu·ªôc s·ªëng sinh vi√™n c√¢n b·∫±ng v√† hi·ªáu qu·∫£:**

**C√¢n b·∫±ng h·ªçc t·∫≠p v√† gi·∫£i tr√≠:**
‚Ä¢ üìö **H·ªçc t·∫≠p**: 60% th·ªùi gian cho vi·ªác h·ªçc ch√≠nh
‚Ä¢ üé® **Gi·∫£i tr√≠**: 20% th·ªùi gian cho s·ªü th√≠ch c√° nh√¢n
‚Ä¢ üí™ **S·ª©c kh·ªèe**: 20% th·ªùi gian cho th·ªÉ thao, ngh·ªâ ng∆°i

**Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a:**
‚Ä¢ üèÉ‚Äç‚ôÄÔ∏è **Th·ªÉ thao**: Tham gia c√¢u l·∫°c b·ªô, gi·∫£i ƒë·∫•u
‚Ä¢ üé≠ **VƒÉn ngh·ªá**: H√°t, m√∫a, k·ªãch, nhi·∫øp ·∫£nh
‚Ä¢ üåç **T√¨nh nguy·ªán**: Gi√∫p ƒë·ª° c·ªông ƒë·ªìng, b·∫£o v·ªá m√¥i tr∆∞·ªùng
‚Ä¢ üíº **Th·ª±c t·∫≠p**: T√≠ch l≈©y kinh nghi·ªám th·ª±c t·∫ø

**Qu·∫£n l√Ω t√†i ch√≠nh:**
‚Ä¢ üí∞ **Thu nh·∫≠p**: L√†m th√™m, h·ªçc b·ªïng, h·ªó tr·ª£ gia ƒë√¨nh
‚Ä¢ üìä **Chi ti√™u**: L·∫≠p k·∫ø ho·∫°ch, ti·∫øt ki·ªám, ƒë·∫ßu t∆∞
‚Ä¢ üéØ **M·ª•c ti√™u**: Ti·∫øt ki·ªám cho t∆∞∆°ng lai, h·ªçc t·∫≠p b·ªï sung

**M·ªëi quan h·ªá:**
‚Ä¢ üë• **B·∫°n b√®**: X√¢y d·ª±ng m·∫°ng l∆∞·ªõi quan h·ªá t√≠ch c·ª±c
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Gia ƒë√¨nh**: Duy tr√¨ li√™n l·∫°c, chia s·∫ª ti·∫øn b·ªô
‚Ä¢ üë®‚Äçüè´ **Gi·∫£ng vi√™n**: T√¨m ki·∫øm s·ª± h∆∞·ªõng d·∫´n, t∆∞ v·∫•n

B·∫°n ƒëang g·∫∑p kh√≥ khƒÉn g√¨ trong cu·ªôc s·ªëng sinh vi√™n? T√¥i s·∫Ω t∆∞ v·∫•n c·ª• th·ªÉ! üòä
        `;
    }
    
    // Handle questions about certificates and additional skills
    if (lowerMessage.includes('ch·ª©ng ch·ªâ') || lowerMessage.includes('b·ªï sung') || lowerMessage.includes('n√¢ng cao')) {
        return `
üèÜ **Ch·ª©ng ch·ªâ v√† k·ªπ nƒÉng b·ªï sung c√≥ √≠ch:**

**Ch·ª©ng ch·ªâ c√¥ng ngh·ªá:**
‚Ä¢ üíª **Microsoft**: Office Specialist, Azure Fundamentals
‚Ä¢ üåê **Google**: IT Support, Digital Marketing
‚Ä¢ üçé **Apple**: Apple Certified Support Professional
‚Ä¢ üîí **Cisco**: CCNA, CCNP cho m·∫°ng m√°y t√≠nh

**Ch·ª©ng ch·ªâ ngo·∫°i ng·ªØ:**
‚Ä¢ üá¨üáß **IELTS/TOEIC**: Ti·∫øng Anh h·ªçc thu·∫≠t v√† giao ti·∫øp
‚Ä¢ üáØüáµ **JLPT**: Ti·∫øng Nh·∫≠t (nhi·ªÅu c∆° h·ªôi vi·ªác l√†m)
‚Ä¢ üá∞üá∑ **TOPIK**: Ti·∫øng H√†n (ng√†nh c√¥ng ngh·ªá, gi·∫£i tr√≠)
‚Ä¢ üá®üá≥ **HSK**: Ti·∫øng Trung (th·ªã tr∆∞·ªùng l·ªõn)

**K·ªπ nƒÉng b·ªï sung:**
‚Ä¢ üìä **Ph√¢n t√≠ch d·ªØ li·ªáu**: Excel n√¢ng cao, SQL, Python
‚Ä¢ üé® **Thi·∫øt k·∫ø**: Photoshop, Illustrator, Figma
‚Ä¢ üì± **Marketing**: Facebook Ads, Google Ads, SEO
‚Ä¢ üíº **Qu·∫£n l√Ω**: Project Management, Agile, Scrum

**L·ª£i √≠ch:**
‚Ä¢ üéØ TƒÉng c∆° h·ªôi vi·ªác l√†m v√† m·ª©c l∆∞∆°ng
‚Ä¢ üåü N·ªïi b·∫≠t trong h·ªì s∆° xin vi·ªác
‚Ä¢ üí° M·ªü r·ªông ki·∫øn th·ª©c v√† k·ªπ nƒÉng
‚Ä¢ üöÄ Chu·∫©n b·ªã cho t∆∞∆°ng lai ngh·ªÅ nghi·ªáp

B·∫°n quan t√¢m ch·ª©ng ch·ªâ n√†o? T√¥i s·∫Ω h∆∞·ªõng d·∫´n chi ti·∫øt! üòä
        `;
    }
    
    // Handle questions about future career development
    if (lowerMessage.includes('t∆∞∆°ng lai') || lowerMessage.includes('ngh·ªÅ nghi·ªáp') || lowerMessage.includes('ph√°t tri·ªÉn')) {
        return `
üöÄ **ƒê·ªãnh h∆∞·ªõng t∆∞∆°ng lai v√† ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp:**

**L·ªô tr√¨nh ph√°t tri·ªÉn:**
‚Ä¢ üéì **Giai ƒëo·∫°n 1 (0-2 nƒÉm)**: H·ªçc t·∫≠p, th·ª±c t·∫≠p, t√≠ch l≈©y kinh nghi·ªám
‚Ä¢ üíº **Giai ƒëo·∫°n 2 (2-5 nƒÉm)**: L√†m vi·ªác chuy√™n m√¥n, ph√°t tri·ªÉn k·ªπ nƒÉng
‚Ä¢ üåü **Giai ƒëo·∫°n 3 (5-10 nƒÉm)**: Chuy√™n gia, qu·∫£n l√Ω, kh·ªüi nghi·ªáp
‚Ä¢ üèÜ **Giai ƒëo·∫°n 4 (10+ nƒÉm)**: L√£nh ƒë·∫°o, t∆∞ v·∫•n, ƒë√†o t·∫°o

**Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp t∆∞∆°ng lai:**
‚Ä¢ ü§ñ **AI & Machine Learning**: Ph√°t tri·ªÉn ·ª©ng d·ª•ng AI, ph√¢n t√≠ch d·ªØ li·ªáu
‚Ä¢ üåê **Digital Marketing**: Marketing online, qu·∫£ng c√°o s·ªë
‚Ä¢ üíª **Cybersecurity**: B·∫£o m·∫≠t th√¥ng tin, an ninh m·∫°ng
‚Ä¢ üå± **Sustainability**: Ph√°t tri·ªÉn b·ªÅn v·ªØng, nƒÉng l∆∞·ª£ng xanh
‚Ä¢ üè• **Healthcare Tech**: C√¥ng ngh·ªá y t·∫ø, telemedicine

**K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ üîÑ **Th√≠ch nghi**: H·ªçc h·ªèi c√¥ng ngh·ªá m·ªõi li√™n t·ª•c
‚Ä¢ üåç **To√†n c·∫ßu**: Ti·∫øng Anh, vƒÉn h√≥a qu·ªëc t·∫ø
‚Ä¢ üí° **S√°ng t·∫°o**: Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ theo c√°ch m·ªõi
‚Ä¢ ü§ù **H·ª£p t√°c**: L√†m vi·ªác nh√≥m, giao ti·∫øp hi·ªáu qu·∫£

**L·ªùi khuy√™n:**
‚Ä¢ üéØ Lu√¥n c·∫≠p nh·∫≠t xu h∆∞·ªõng m·ªõi
‚Ä¢ üìö H·ªçc t·∫≠p li√™n t·ª•c v√† kh√¥ng ng·ª´ng
‚Ä¢ üåü X√¢y d·ª±ng th∆∞∆°ng hi·ªáu c√° nh√¢n
‚Ä¢ üí™ D≈©ng c·∫£m th·ª≠ nghi·ªám v√† m·∫Øc sai l·∫ßm

B·∫°n mu·ªën t√¨m hi·ªÉu s√¢u h∆°n v·ªÅ h∆∞·ªõng ƒëi n√†o? T√¥i s·∫Ω t∆∞ v·∫•n chi ti·∫øt! üòä
        `;
    }
    
    // M√¥n h·ªçc c·ª• th·ªÉ
    if (lowerMessage.includes('to√°n') || lowerMessage.includes('math')) {
        return `
üìä **To√°n h·ªçc - N·ªÅn t·∫£ng c·ªßa t∆∞ duy logic:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ L·∫≠p tr√¨nh vi√™n & K·ªπ s∆∞ ph·∫ßn m·ªÅm
‚Ä¢ Nh√† ph√¢n t√≠ch d·ªØ li·ªáu & Th·ªëng k√™
‚Ä¢ K·ªπ s∆∞ t√†i ch√≠nh & Ng√¢n h√†ng
‚Ä¢ Nh√† nghi√™n c·ª©u khoa h·ªçc

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ T∆∞ duy logic v√† ph√¢n t√≠ch
‚Ä¢ Kh·∫£ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ
‚Ä¢ T√≠nh ch√≠nh x√°c v√† c·∫©n th·∫≠n

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ L√†m nhi·ªÅu b√†i t·∫≠p th·ª±c h√†nh
‚Ä¢ H·ªçc theo nh√≥m ƒë·ªÉ trao ƒë·ªïi √Ω t∆∞·ªüng
‚Ä¢ √Åp d·ª•ng v√†o th·ª±c t·∫ø cu·ªôc s·ªëng

**üöÄ Tri·ªÉn v·ªçng:** To√°n h·ªçc ƒëang tr·ªü th√†nh k·ªπ nƒÉng c·ªët l√µi trong th·ªùi ƒë·∫°i AI v√† d·ªØ li·ªáu l·ªõn.
        `;
    }

    if (lowerMessage.includes('v·∫≠t l√Ω') || lowerMessage.includes('physics')) {
        return `
‚öõÔ∏è **V·∫≠t l√Ω - Khoa h·ªçc c·ªßa t·ª± nhi√™n:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ K·ªπ s∆∞ ƒëi·ªán t·ª≠ & Vi·ªÖn th√¥ng
‚Ä¢ K·ªπ s∆∞ c∆° kh√≠ & T·ª± ƒë·ªông h√≥a
‚Ä¢ Nh√† nghi√™n c·ª©u v·∫≠t li·ªáu m·ªõi
‚Ä¢ K·ªπ s∆∞ nƒÉng l∆∞·ª£ng & M√¥i tr∆∞·ªùng

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ Hi·ªÉu bi·∫øt v·ªÅ c√°c nguy√™n l√Ω c∆° b·∫£n
‚Ä¢ Kh·∫£ nƒÉng th·ª±c nghi·ªám v√† quan s√°t
‚Ä¢ T∆∞ duy ph√¢n t√≠ch v√† suy lu·∫≠n

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ K·∫øt h·ª£p l√Ω thuy·∫øt v·ªõi th·ª±c h√†nh
‚Ä¢ Th·ª±c hi·ªán c√°c th√≠ nghi·ªám ƒë∆°n gi·∫£n
‚Ä¢ Quan s√°t hi·ªán t∆∞·ª£ng trong cu·ªôc s·ªëng

**üöÄ Tri·ªÉn v·ªçng:** V·∫≠t l√Ω ƒëang m·ªü ra nh·ªØng c∆° h·ªôi m·ªõi trong lƒ©nh v·ª±c c√¥ng ngh·ªá l∆∞·ª£ng t·ª≠ v√† nƒÉng l∆∞·ª£ng t√°i t·∫°o.
        `;
    }

    if (lowerMessage.includes('vƒÉn') || lowerMessage.includes('literature')) {
        return `
üìö **VƒÉn h·ªçc - Ngh·ªá thu·∫≠t ng√¥n t·ª´:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ Nh√† b√°o & Bi√™n t·∫≠p vi√™n
‚Ä¢ Copywriter & Content Creator
‚Ä¢ Gi√°o vi√™n & Gi·∫£ng vi√™n
‚Ä¢ Nh√† vƒÉn & D·ªãch gi·∫£

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ Kh·∫£ nƒÉng vi·∫øt v√† di·ªÖn ƒë·∫°t
‚Ä¢ T∆∞ duy ph·∫£n bi·ªán v√† ph√¢n t√≠ch
‚Ä¢ Hi·ªÉu bi·∫øt vƒÉn h√≥a v√† x√£ h·ªôi

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ ƒê·ªçc nhi·ªÅu t√°c ph·∫©m ƒëa d·∫°ng
‚Ä¢ Vi·∫øt nh·∫≠t k√Ω v√† s√°ng t√°c
‚Ä¢ Th·∫£o lu·∫≠n v√† tranh lu·∫≠n

**üöÄ Tri·ªÉn v·ªçng:** Trong th·ªùi ƒë·∫°i s·ªë, k·ªπ nƒÉng vi·∫øt v√† giao ti·∫øp v·∫´n l√† nh·ªØng k·ªπ nƒÉng quan tr·ªçng nh·∫•t.
        `;
    }

    if (lowerMessage.includes('ti·∫øng anh') || lowerMessage.includes('english')) {
        return `
üåç **Ti·∫øng Anh - Ng√¥n ng·ªØ to√†n c·∫ßu:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ Th√¥ng d·ªãch vi√™n & Bi√™n d·ªãch
‚Ä¢ H∆∞·ªõng d·∫´n vi√™n du l·ªãch
‚Ä¢ Nh√¢n vi√™n kinh doanh qu·ªëc t·∫ø
‚Ä¢ Gi√°o vi√™n ti·∫øng Anh

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ Ph√°t √¢m chu·∫©n v√† ng·ªØ ƒëi·ªáu
‚Ä¢ V·ªën t·ª´ v·ª±ng phong ph√∫
‚Ä¢ Ng·ªØ ph√°p ch√≠nh x√°c

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ Xem phim v√† nghe nh·∫°c ti·∫øng Anh
‚Ä¢ ƒê·ªçc s√°ch v√† b√°o ti·∫øng Anh
‚Ä¢ Th·ª±c h√†nh giao ti·∫øp v·ªõi ng∆∞·ªùi b·∫£n x·ª©

**üöÄ Tri·ªÉn v·ªçng:** Ti·∫øng Anh l√† y√™u c·∫ßu b·∫Øt bu·ªôc trong h·∫ßu h·∫øt c√°c c√¥ng vi·ªác c√≥ thu nh·∫≠p cao.
        `;
    }

    if (lowerMessage.includes('c√¥ng ngh·ªá') || lowerMessage.includes('it') || lowerMessage.includes('tin h·ªçc')) {
        return `
üíª **C√¥ng ngh·ªá th√¥ng tin - Lƒ©nh v·ª±c c·ªßa t∆∞∆°ng lai:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ L·∫≠p tr√¨nh vi√™n & K·ªπ s∆∞ ph·∫ßn m·ªÅm
‚Ä¢ Chuy√™n gia b·∫£o m·∫≠t m·∫°ng
‚Ä¢ Nh√† ph√¢n t√≠ch d·ªØ li·ªáu
‚Ä¢ Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ T∆∞ duy logic v√† gi·∫£i thu·∫≠t
‚Ä¢ Kh·∫£ nƒÉng h·ªçc h·ªèi c√¥ng ngh·ªá m·ªõi
‚Ä¢ K·ªπ nƒÉng l√†m vi·ªác nh√≥m

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ Th·ª±c h√†nh l·∫≠p tr√¨nh th∆∞·ªùng xuy√™n
‚Ä¢ Tham gia c√°c d·ª± √°n th·ª±c t·∫ø
‚Ä¢ H·ªçc t·ª´ c√°c ngu·ªìn tr·ª±c tuy·∫øn

**üöÄ Tri·ªÉn v·ªçng:** CNTT l√† ng√†nh c√≥ t·ªëc ƒë·ªô ph√°t tri·ªÉn nhanh nh·∫•t v·ªõi nhu c·∫ßu nh√¢n l·ª±c cao v√† m·ª©c l∆∞∆°ng c·∫°nh tranh.
        `;
    }

    if (lowerMessage.includes('kinh doanh') || lowerMessage.includes('business')) {
        return `
üíº **Kinh doanh - Ngh·ªá thu·∫≠t qu·∫£n l√Ω:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ Qu·∫£n l√Ω kinh doanh & Marketing
‚Ä¢ Chuy√™n gia t√†i ch√≠nh & K·∫ø to√°n
‚Ä¢ Nh√† kh·ªüi nghi·ªáp & Doanh nh√¢n
‚Ä¢ Chuy√™n vi√™n t∆∞ v·∫•n chi·∫øn l∆∞·ª£c

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ T∆∞ duy chi·∫øn l∆∞·ª£c v√† ph√¢n t√≠ch
‚Ä¢ K·ªπ nƒÉng l√£nh ƒë·∫°o v√† qu·∫£n l√Ω
‚Ä¢ Kh·∫£ nƒÉng giao ti·∫øp v√† thuy·∫øt ph·ª•c

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ ƒê·ªçc s√°ch kinh doanh v√† case study
‚Ä¢ Tham gia c√°c cu·ªôc thi kh·ªüi nghi·ªáp
‚Ä¢ Th·ª±c t·∫≠p t·∫°i c√°c c√¥ng ty

**üöÄ Tri·ªÉn v·ªçng:** Kinh doanh lu√¥n l√† lƒ©nh v·ª±c c√≥ nhu c·∫ßu nh√¢n l·ª±c cao v·ªõi c∆° h·ªôi thƒÉng ti·∫øn kh√¥ng gi·ªõi h·∫°n.
        `;
    }

    if (lowerMessage.includes('thi·∫øt k·∫ø') || lowerMessage.includes('design')) {
        return `
üé® **Thi·∫øt k·∫ø - Ngh·ªá thu·∫≠t s√°ng t·∫°o:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ Thi·∫øt k·∫ø ƒë·ªì h·ªça & UI/UX
‚Ä¢ Thi·∫øt k·∫ø n·ªôi th·∫•t & Ki·∫øn tr√∫c
‚Ä¢ Thi·∫øt k·∫ø th·ªùi trang & S·∫£n ph·∫©m
‚Ä¢ Thi·∫øt k·∫ø web & Mobile app

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ Kh·∫£ nƒÉng s√°ng t·∫°o v√† th·∫©m m·ªπ
‚Ä¢ S·ª≠ d·ª•ng th√†nh th·∫°o c√¥ng c·ª• thi·∫øt k·∫ø
‚Ä¢ Hi·ªÉu bi·∫øt v·ªÅ m√†u s·∫Øc v√† b·ªë c·ª•c

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ Th·ª±c h√†nh thi·∫øt k·∫ø th∆∞·ªùng xuy√™n
‚Ä¢ H·ªçc t·ª´ c√°c designer n·ªïi ti·∫øng
‚Ä¢ Tham gia c√°c cu·ªôc thi thi·∫øt k·∫ø

**üöÄ Tri·ªÉn v·ªçng:** Thi·∫øt k·∫ø ƒëang tr·ªü th√†nh y·∫øu t·ªë quan tr·ªçng trong m·ªçi lƒ©nh v·ª±c, t·ª´ c√¥ng ngh·ªá ƒë·∫øn th∆∞∆°ng m·∫°i.
        `;
    }

    if (lowerMessage.includes('marketing')) {
        return `
üì¢ **Marketing - Ngh·ªá thu·∫≠t k·∫øt n·ªëi:**

**üéØ ·ª®ng d·ª•ng ngh·ªÅ nghi·ªáp:**
‚Ä¢ Chuy√™n vi√™n Marketing s·ªë
‚Ä¢ Qu·∫£n l√Ω th∆∞∆°ng hi·ªáu
‚Ä¢ Chuy√™n gia qu·∫£ng c√°o
‚Ä¢ Nh√† ph√¢n t√≠ch th·ªã tr∆∞·ªùng

**üí™ K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ Hi·ªÉu bi·∫øt v·ªÅ t√¢m l√Ω kh√°ch h√†ng
‚Ä¢ K·ªπ nƒÉng s√°ng t·∫°o n·ªôi dung
‚Ä¢ Ph√¢n t√≠ch d·ªØ li·ªáu v√† xu h∆∞·ªõng

**üìö Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:**
‚Ä¢ Th·ª±c h√†nh c√°c chi·∫øn d·ªãch marketing
‚Ä¢ H·ªçc t·ª´ c√°c case study th√†nh c√¥ng
‚Ä¢ Tham gia c√°c kh√≥a h·ªçc online

**üöÄ Tri·ªÉn v·ªçng:** Marketing s·ªë ƒëang ph√°t tri·ªÉn m·∫°nh m·∫Ω v·ªõi s·ª± xu·∫•t hi·ªán c·ªßa AI, Big Data v√† c√°c n·ªÅn t·∫£ng m·∫°ng x√£ h·ªôi m·ªõi.
        `;
    }

    // Default response for other questions
    return `
ü§î T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ "${userMessage}". 

T√¥i l√† AI Copilot chuy√™n v·ªÅ t∆∞ v·∫•n gi√°o d·ª•c to√†n di·ªán t·∫°i FPT Polytechnic. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

**üéØ T∆∞ v·∫•n chuy√™n m√¥n:**
‚Ä¢ Ng√†nh h·ªçc ph√π h·ª£p v√† tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp
‚Ä¢ Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£ cho t·ª´ng lƒ©nh v·ª±c
‚Ä¢ Chu·∫©n b·ªã ki·∫øn th·ª©c v√† k·ªπ nƒÉng c·∫ßn thi·∫øt
‚Ä¢ Th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng ng√†nh h·ªçc

**üåü Ph√°t tri·ªÉn c√° nh√¢n:**
‚Ä¢ K·ªπ nƒÉng m·ªÅm: giao ti·∫øp, l√†m vi·ªác nh√≥m, qu·∫£n l√Ω th·ªùi gian
‚Ä¢ H·ªó tr·ª£ t√¢m l√Ω: gi·∫£m stress, tƒÉng t·ª± tin, v∆∞·ª£t qua kh√≥ khƒÉn
‚Ä¢ ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp v√† ph√°t tri·ªÉn s·ª± nghi·ªáp
‚Ä¢ X√¢y d·ª±ng th∆∞∆°ng hi·ªáu c√° nh√¢n

**üéì Cu·ªôc s·ªëng sinh vi√™n:**
‚Ä¢ C√¢n b·∫±ng h·ªçc t·∫≠p v√† gi·∫£i tr√≠
‚Ä¢ Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√† m·ªëi quan h·ªá
‚Ä¢ Qu·∫£n l√Ω t√†i ch√≠nh v√† k·∫ø ho·∫°ch t∆∞∆°ng lai
‚Ä¢ H∆∞·ªõng d·∫´n th·ª±c t·∫≠p v√† vi·ªác l√†m

**üèÜ N√¢ng cao nƒÉng l·ª±c:**
‚Ä¢ Ch·ª©ng ch·ªâ v√† k·ªπ nƒÉng b·ªï sung c√≥ √≠ch
‚Ä¢ C·∫≠p nh·∫≠t xu h∆∞·ªõng ngh·ªÅ nghi·ªáp m·ªõi
‚Ä¢ Chu·∫©n b·ªã cho th·ªã tr∆∞·ªùng lao ƒë·ªông t∆∞∆°ng lai
‚Ä¢ H·ªçc b·ªïng v√† h·ªó tr·ª£ t√†i ch√≠nh

**üí° T∆∞ v·∫•n chung:**
‚Ä¢ Th√¥ng tin v·ªÅ FPT Polytechnic
‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng
‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ gi√°o d·ª•c
‚Ä¢ L·ªùi khuy√™n v·ªÅ t∆∞∆°ng lai

B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ c√°c ch·ªß ƒë·ªÅ tr√™n, ho·∫∑c ho√†n th√†nh b√†i kh·∫£o s√°t ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n c√° nh√¢n h√≥a cho b·∫°n! üòä

Ho·∫∑c b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c c√¢u h·ªèi nhanh b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu! üöÄ

**üí¨ G·ª£i √Ω c√¢u h·ªèi:**
‚Ä¢ "T√¥i n√™n h·ªçc ng√†nh g√¨ v·ªõi s·ªü th√≠ch [s·ªü th√≠ch c·ª• th·ªÉ]?"
‚Ä¢ "L√†m th·∫ø n√†o ƒë·ªÉ c·∫£i thi·ªán [k·ªπ nƒÉng c·ª• th·ªÉ]?"
‚Ä¢ "Tri·ªÉn v·ªçng c·ªßa ng√†nh [t√™n ng√†nh] nh∆∞ th·∫ø n√†o?"
‚Ä¢ "T√¥i c·∫ßn chu·∫©n b·ªã g√¨ cho [m·ª•c ti√™u c·ª• th·ªÉ]?"
    `;
}

function getEnhancedFallbackResponse(userMessage, currentFormData, lastResult) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Check for specific keywords and provide comprehensive responses
    if (lowerMessage.includes('ng√†nh') || lowerMessage.includes('major')) {
        if (currentFormData) {
            return `
üéØ **D·ª±a tr√™n th√¥ng tin c·ªßa b·∫°n, t√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ ng√†nh h·ªçc:**

**Th√¥ng tin hi·ªán t·∫°i:**
‚Ä¢ Tu·ªïi: ${currentFormData.age || 'Ch∆∞a cung c·∫•p'}
‚Ä¢ S·ªü th√≠ch: ${currentFormData.interests ? currentFormData.interests : 'Ch∆∞a cung c·∫•p'}
‚Ä¢ M·ª•c ti√™u: ${currentFormData.careerGoals || 'Ch∆∞a cung c·∫•p'}

**ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n, h√£y:**
1. Ho√†n th√†nh b√†i kh·∫£o s√°t ƒë·∫ßy ƒë·ªß
2. Nh·∫•n "Ph√¢n t√≠ch v√† T∆∞ v·∫•n"
3. T√¥i s·∫Ω ƒë∆∞a ra g·ª£i √Ω ng√†nh h·ªçc ph√π h·ª£p nh·∫•t

B·∫°n c√≥ mu·ªën ho√†n th√†nh kh·∫£o s√°t ngay b√¢y gi·ªù kh√¥ng? üòä
            `;
        } else {
            return `
üéØ **T∆∞ v·∫•n ng√†nh h·ªçc ph√π h·ª£p:**

**C√°c ng√†nh n·ªïi b·∫≠t t·∫°i FPT Polytechnic:**

**üíª C√¥ng ngh·ªá th√¥ng tin:**
‚Ä¢ Ph√°t tri·ªÉn ph·∫ßn m·ªÅm - L·∫≠p tr√¨nh, ph√°t tri·ªÉn ·ª©ng d·ª•ng
‚Ä¢ Thi·∫øt k·∫ø ƒë·ªì h·ªça - S√°ng t·∫°o, thi·∫øt k·∫ø digital
‚Ä¢ Qu·∫£n tr·ªã m·∫°ng - B·∫£o m·∫≠t, h·∫° t·∫ßng c√¥ng ngh·ªá

**üíº Kinh doanh:**
‚Ä¢ Qu·∫£n tr·ªã kinh doanh - Qu·∫£n l√Ω, marketing, sales
‚Ä¢ K·∫ø to√°n - T√†i ch√≠nh, ki·ªÉm to√°n, thu·∫ø
‚Ä¢ Logistics - Chu·ªói cung ·ª©ng, v·∫≠n t·∫£i

**üé® S√°ng t·∫°o:**
‚Ä¢ Thi·∫øt k·∫ø n·ªôi th·∫•t - Ki·∫øn tr√∫c, trang tr√≠
‚Ä¢ Thi·∫øt k·∫ø th·ªùi trang - Th·ªùi trang, may m·∫∑c
‚Ä¢ Quay phim - Truy·ªÅn th√¥ng, gi·∫£i tr√≠

**üîß K·ªπ thu·∫≠t:**
‚Ä¢ C√¥ng ngh·ªá √¥ t√¥ - C∆° kh√≠, ƒëi·ªán t·ª≠ √¥ t√¥
‚Ä¢ ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng - Vi·ªÖn th√¥ng, IoT

**ƒê·ªÉ bi·∫øt ng√†nh n√†o ph√π h·ª£p nh·∫•t v·ªõi b·∫°n, h√£y ho√†n th√†nh b√†i kh·∫£o s√°t! üòä**
            `;
        }
    }
    
    if (lowerMessage.includes('h·ªçc') && (lowerMessage.includes('g√¨') || lowerMessage.includes('chu·∫©n b·ªã'))) {
        return `
üìö **Chu·∫©n b·ªã cho vi·ªác h·ªçc t·∫°i FPT Polytechnic:**

**K·ªπ nƒÉng c∆° b·∫£n:**
‚Ä¢ üá¨üáß **Ti·∫øng Anh**: ƒê·ªçc hi·ªÉu t√†i li·ªáu, giao ti·∫øp c∆° b·∫£n
‚Ä¢ üíª **Tin h·ªçc**: Word, Excel, PowerPoint, Internet
‚Ä¢ üß† **T∆∞ duy**: Logic, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ, s√°ng t·∫°o

**Theo t·ª´ng lƒ©nh v·ª±c:**
‚Ä¢ **C√¥ng ngh·ªá**: To√°n h·ªçc, t∆∞ duy logic, kh√°m ph√° l·∫≠p tr√¨nh
‚Ä¢ **Kinh doanh**: To√°n, vƒÉn h√≥a x√£ h·ªôi, kh·∫£ nƒÉng giao ti·∫øp
‚Ä¢ **S√°ng t·∫°o**: M·ªπ thu·∫≠t, th·∫©m m·ªπ, ph·∫ßn m·ªÅm thi·∫øt k·∫ø
‚Ä¢ **K·ªπ thu·∫≠t**: To√°n, V·∫≠t l√Ω, t∆∞ duy kh√¥ng gian

**Chu·∫©n b·ªã tinh th·∫ßn:**
‚Ä¢ üéØ X√°c ƒë·ªãnh m·ª•c ti√™u h·ªçc t·∫≠p r√µ r√†ng
‚Ä¢ üí™ S·∫µn s√†ng h·ªçc h·ªèi v√† thay ƒë·ªïi
‚Ä¢ üåü T√≠ch c·ª±c tham gia ho·∫°t ƒë·ªông ngo·∫°i kh√≥a

B·∫°n quan t√¢m lƒ©nh v·ª±c n√†o nh·∫•t? T√¥i s·∫Ω h∆∞·ªõng d·∫´n chi ti·∫øt h∆°n! ü§î
        `;
    }
    
    if (lowerMessage.includes('t∆∞∆°ng lai') || lowerMessage.includes('ngh·ªÅ nghi·ªáp')) {
        return `
üöÄ **Tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp t∆∞∆°ng lai:**

**Th·ªã tr∆∞·ªùng lao ƒë·ªông:**
‚Ä¢ üíº **T·ª∑ l·ªá c√≥ vi·ªác l√†m**: > 95% sau t·ªët nghi·ªáp
‚Ä¢ üí∞ **M·ª©c l∆∞∆°ng kh·ªüi ƒëi·ªÉm**: 7-15 tri·ªáu/th√°ng t√πy ng√†nh
‚Ä¢ üåü **C∆° h·ªôi thƒÉng ti·∫øn**: R√µ r√†ng, d·ª±a tr√™n nƒÉng l·ª±c

**Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp:**
‚Ä¢ ü§ñ **AI & Machine Learning**: Ph√°t tri·ªÉn ·ª©ng d·ª•ng th√¥ng minh
‚Ä¢ üåê **Digital Marketing**: Marketing online, qu·∫£ng c√°o s·ªë
‚Ä¢ üíª **Cybersecurity**: B·∫£o m·∫≠t th√¥ng tin, an ninh m·∫°ng
‚Ä¢ üå± **Sustainability**: Ph√°t tri·ªÉn b·ªÅn v·ªØng, nƒÉng l∆∞·ª£ng xanh

**L·ªô tr√¨nh ph√°t tri·ªÉn:**
‚Ä¢ üéì **0-2 nƒÉm**: H·ªçc t·∫≠p, th·ª±c t·∫≠p, t√≠ch l≈©y kinh nghi·ªám
‚Ä¢ üíº **2-5 nƒÉm**: L√†m vi·ªác chuy√™n m√¥n, ph√°t tri·ªÉn k·ªπ nƒÉng
‚Ä¢ üåü **5-10 nƒÉm**: Chuy√™n gia, qu·∫£n l√Ω, kh·ªüi nghi·ªáp

B·∫°n mu·ªën t√¨m hi·ªÉu s√¢u h∆°n v·ªÅ ng√†nh n√†o? T√¥i s·∫Ω t∆∞ v·∫•n chi ti·∫øt! üòä
        `;
    }
    
    if (lowerMessage.includes('k·ªπ nƒÉng') || lowerMessage.includes('ph√°t tri·ªÉn')) {
        return `
üåü **Ph√°t tri·ªÉn k·ªπ nƒÉng c√° nh√¢n:**

**K·ªπ nƒÉng m·ªÅm quan tr·ªçng:**
‚Ä¢ üó£Ô∏è **Giao ti·∫øp**: L·∫Øng nghe, thuy·∫øt tr√¨nh, vi·∫øt l√°ch
‚Ä¢ üë• **L√†m vi·ªác nh√≥m**: H·ª£p t√°c, l√£nh ƒë·∫°o, gi·∫£i quy·∫øt xung ƒë·ªôt
‚Ä¢ ‚è∞ **Qu·∫£n l√Ω th·ªùi gian**: L·∫≠p k·∫ø ho·∫°ch, ∆∞u ti√™n, tr√°nh tr√¨ ho√£n
‚Ä¢ üí° **T∆∞ duy ph·∫£n bi·ªán**: Ph√¢n t√≠ch, ƒë√°nh gi√°, s√°ng t·∫°o

**K·ªπ nƒÉng chuy√™n m√¥n:**
‚Ä¢ üíª **C√¥ng ngh·ªá**: C·∫≠p nh·∫≠t xu h∆∞·ªõng m·ªõi, h·ªçc c√¥ng c·ª• m·ªõi
‚Ä¢ üìä **Ph√¢n t√≠ch d·ªØ li·ªáu**: Excel, SQL, Python, Power BI
‚Ä¢ üé® **Thi·∫øt k·∫ø**: Photoshop, Illustrator, Figma, Canva
‚Ä¢ üì± **Marketing**: Social media, Google Ads, SEO

**C√°ch ph√°t tri·ªÉn:**
‚Ä¢ üìö **H·ªçc li√™n t·ª•c**: Kh√≥a h·ªçc online, s√°ch, workshop
‚Ä¢ üå± **Th·ª±c h√†nh**: L√†m project, tham gia hackathon
‚Ä¢ ü§ù **K·∫øt n·ªëi**: Tham gia c·ªông ƒë·ªìng, networking
‚Ä¢ üí™ **Ki√™n tr√¨**: ƒê·∫∑t m·ª•c ti√™u nh·ªè, theo d√µi ti·∫øn ƒë·ªô

B·∫°n mu·ªën c·∫£i thi·ªán k·ªπ nƒÉng n√†o tr∆∞·ªõc? T√¥i s·∫Ω h∆∞·ªõng d·∫´n c·ª• th·ªÉ! üòä
        `;
    }
    
    // Default comprehensive response
    return `
ü§î **T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ "${userMessage}"**

L√† AI Copilot c·ªßa FPT Polytechnic, t√¥i c√≥ th·ªÉ t∆∞ v·∫•n to√†n di·ªán v·ªÅ:

**üéØ T∆∞ v·∫•n chuy√™n m√¥n:**
‚Ä¢ Ng√†nh h·ªçc ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nƒÉng l·ª±c
‚Ä¢ Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£ cho t·ª´ng lƒ©nh v·ª±c
‚Ä¢ Chu·∫©n b·ªã ki·∫øn th·ª©c v√† k·ªπ nƒÉng c·∫ßn thi·∫øt
‚Ä¢ Th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng ng√†nh h·ªçc

**üåü Ph√°t tri·ªÉn c√° nh√¢n:**
‚Ä¢ K·ªπ nƒÉng m·ªÅm: giao ti·∫øp, l√†m vi·ªác nh√≥m, qu·∫£n l√Ω th·ªùi gian
‚Ä¢ H·ªó tr·ª£ t√¢m l√Ω: gi·∫£m stress, tƒÉng t·ª± tin, v∆∞·ª£t qua kh√≥ khƒÉn
‚Ä¢ ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp v√† ph√°t tri·ªÉn s·ª± nghi·ªáp
‚Ä¢ X√¢y d·ª±ng th∆∞∆°ng hi·ªáu c√° nh√¢n

**üéì Cu·ªôc s·ªëng sinh vi√™n:**
‚Ä¢ C√¢n b·∫±ng h·ªçc t·∫≠p v√† gi·∫£i tr√≠
‚Ä¢ Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√† m·ªëi quan h·ªá
‚Ä¢ Qu·∫£n l√Ω t√†i ch√≠nh v√† k·∫ø ho·∫°ch t∆∞∆°ng lai
‚Ä¢ H∆∞·ªõng d·∫´n th·ª±c t·∫≠p v√† vi·ªác l√†m

**üèÜ N√¢ng cao nƒÉng l·ª±c:**
‚Ä¢ Ch·ª©ng ch·ªâ v√† k·ªπ nƒÉng b·ªï sung c√≥ √≠ch
‚Ä¢ C·∫≠p nh·∫≠t xu h∆∞·ªõng ngh·ªÅ nghi·ªáp m·ªõi
‚Ä¢ Chu·∫©n b·ªã cho th·ªã tr∆∞·ªùng lao ƒë·ªông t∆∞∆°ng lai
‚Ä¢ H·ªçc b·ªïng v√† h·ªó tr·ª£ t√†i ch√≠nh

**üí° ƒê·ªÉ t∆∞ v·∫•n c√° nh√¢n h√≥a:**
1. Ho√†n th√†nh b√†i kh·∫£o s√°t ƒë·∫ßy ƒë·ªß
2. T√¥i s·∫Ω ph√¢n t√≠ch d·ªØ li·ªáu c·ªßa b·∫°n
3. ƒê∆∞a ra g·ª£i √Ω ph√π h·ª£p nh·∫•t

B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu kh·∫£o s√°t ho·∫∑c h·ªèi c·ª• th·ªÉ v·ªÅ ch·ªß ƒë·ªÅ n√†o kh√¥ng? üòä
    `;
}

function getCurrentFormData() {
    try {
        const name = document.getElementById('name')?.value || '';
        if (!name) return null;
        
        return {
            name: name,
            interests: document.getElementById('interests')?.value || '',
            skills: document.getElementById('skills')?.value || '',
            favoriteSubjects: document.getElementById('favoriteSubjects')?.value || '',
            careerGoals: document.getElementById('careerGoals')?.value || ''
        };
    } catch (error) {
        return null;
    }
}

function getLastAnalysisResult() {
    try {
        const history = JSON.parse(localStorage.getItem('counselingHistory') || '[]');
        return history.length > 0 ? history[0].result : null;
    } catch (error) {
        return null;
    }
}

// Infographic Functions
function generateInfographic() {
    const lastResult = getLastAnalysisResult();
    if (!lastResult) {
        alert('Vui l√≤ng ho√†n th√†nh kh·∫£o s√°t tr∆∞·ªõc ƒë·ªÉ t·∫°o Infographic!');
        return;
    }
    
    const formData = getCurrentFormData();
    if (!formData) {
        alert('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh·∫£o s√°t!');
        return;
    }
    
    const infographicContent = document.getElementById('infographicContent');
    infographicContent.innerHTML = createInfographicHTML(lastResult, formData);
    
    // Add export functionality
    addExportEventListeners();
}

function createInfographicHTML(result, userData) {
    const scores = {
        technology: parseInt(document.getElementById('technology')?.value || 5),
        creativity: parseInt(document.getElementById('creativity')?.value || 5),
        communication: parseInt(document.getElementById('communication')?.value || 5),
        logic: parseInt(document.getElementById('logic')?.value || 5),
        business: parseInt(document.getElementById('business')?.value || 5),
        manual: parseInt(document.getElementById('manual')?.value || 5)
    };
    
    const academicScores = {
        math: parseFloat(document.getElementById('mathScore')?.value || 7),
        english: parseFloat(document.getElementById('englishScore')?.value || 7),
        literature: parseFloat(document.getElementById('literatureScore')?.value || 7),
        physics: parseFloat(document.getElementById('physicsScore')?.value || 7)
    };
    
    return `
        <div class="infographic-container">
            <div class="infographic-header">
                <h2>üé® Infographic T∆∞ v·∫•n Ng√†nh h·ªçc</h2>
                <p>D√†nh ri√™ng cho: ${userData.name} - ${getAgeFromForm()} tu·ªïi</p>
            </div>

            <div class="infographic-grid">
                <!-- Skills Analysis -->
                <div class="infographic-card">
                    <h3>üí™ Ph√¢n t√≠ch K·ªπ nƒÉng</h3>
                    <div class="skill-chart">
                        <div class="skill-item">
                            <span class="skill-label">üíª C√¥ng ngh·ªá</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${scores.technology * 10}%"></div>
                            </div>
                            <span class="skill-value">${scores.technology}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">üé® S√°ng t·∫°o</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${scores.creativity * 10}%"></div>
                            </div>
                            <span class="skill-value">${scores.creativity}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">üó£Ô∏è Giao ti·∫øp</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${scores.communication * 10}%"></div>
                            </div>
                            <span class="skill-value">${scores.communication}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">üß† Logic</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${scores.logic * 10}%"></div>
                            </div>
                            <span class="skill-value">${scores.logic}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">üíº Kinh doanh</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${scores.business * 10}%"></div>
                            </div>
                            <span class="skill-value">${scores.business}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">üîß Th·ª±c h√†nh</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${scores.manual * 10}%"></div>
                            </div>
                            <span class="skill-value">${scores.manual}/10</span>
                        </div>
                    </div>
                </div>

                <!-- Academic Performance -->
                <div class="infographic-card">
                    <h3>üìä K·∫øt qu·∫£ H·ªçc t·∫≠p</h3>
                    <div class="skill-chart">
                        <div class="skill-item">
                            <span class="skill-label">üìä To√°n h·ªçc</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${academicScores.math * 10}%"></div>
                            </div>
                            <span class="skill-value">${academicScores.math}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">üåç Ti·∫øng Anh</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${academicScores.english * 10}%"></div>
                            </div>
                            <span class="skill-value">${academicScores.english}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">üìö VƒÉn h·ªçc</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${academicScores.literature * 10}%"></div>
                            </div>
                            <span class="skill-value">${academicScores.literature}/10</span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-label">‚öõÔ∏è V·∫≠t l√Ω</span>
                            <div class="skill-bar">
                                <div class="skill-fill" style="width: ${academicScores.physics * 10}%"></div>
                            </div>
                            <span class="skill-value">${academicScores.physics}/10</span>
                        </div>
                    </div>
                </div>

                <!-- Personality Traits -->
                <div class="infographic-card">
                    <h3>üåü ƒê·∫∑c ƒëi·ªÉm T√≠nh c√°ch</h3>
                    <div class="personality-traits">
                        <div class="trait-item">
                            <div class="trait-icon">üíª</div>
                            <div class="trait-label">C√¥ng ngh·ªá</div>
                            <div class="trait-score">${scores.technology}/10</div>
                        </div>
                        <div class="trait-item">
                            <div class="trait-icon">üé®</div>
                            <div class="trait-label">S√°ng t·∫°o</div>
                            <div class="trait-score">${scores.creativity}/10</div>
                        </div>
                        <div class="trait-item">
                            <div class="trait-icon">üó£Ô∏è</div>
                            <div class="trait-label">Giao ti·∫øp</div>
                            <div class="trait-score">${scores.communication}/10</div>
                        </div>
                        <div class="trait-item">
                            <div class="trait-icon">üß†</div>
                            <div class="trait-label">Logic</div>
                            <div class="trait-score">${scores.logic}/10</div>
                        </div>
                        <div class="trait-item">
                            <div class="trait-icon">üíº</div>
                            <div class="trait-label">Kinh doanh</div>
                            <div class="trait-score">${scores.business}/10</div>
                        </div>
                        <div class="trait-item">
                            <div class="trait-icon">üîß</div>
                            <div class="trait-label">Th·ª±c h√†nh</div>
                            <div class="trait-score">${scores.manual}/10</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recommendation Summary -->
            <div class="recommendation-summary">
                <h3>üéØ Khuy·∫øn ngh·ªã Ng√†nh h·ªçc</h3>
                <p>${getRecommendationSummary(result, scores)}</p>
            </div>

            <!-- Action Steps -->
            <div class="action-steps">
                <h3>üöÄ C√°c b∆∞·ªõc Ti·∫øp theo</h3>
                <div class="step-item">
                    <div class="step-number">1</div>
                    <div class="step-content">
                        <h4>Xem k·∫øt qu·∫£ chi ti·∫øt</h4>
                        <p>Chuy·ªÉn sang tab "K·∫øt qu·∫£" ƒë·ªÉ xem ph√¢n t√≠ch chi ti·∫øt v·ªÅ ng√†nh h·ªçc ph√π h·ª£p</p>
                    </div>
                </div>
                <div class="step-item">
                    <div class="step-number">2</div>
                    <div class="step-content">
                        <h4>T√¨m hi·ªÉu v·ªÅ ng√†nh h·ªçc</h4>
                        <p>Nghi√™n c·ª©u s√¢u h∆°n v·ªÅ c√°c ng√†nh h·ªçc ƒë∆∞·ª£c khuy·∫øn ngh·ªã</p>
                    </div>
                </div>
                <div class="step-item">
                    <div class="step-number">3</div>
                    <div class="step-content">
                        <h4>L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p</h4>
                        <p>X√¢y d·ª±ng l·ªô tr√¨nh h·ªçc t·∫≠p v√† chu·∫©n b·ªã cho t∆∞∆°ng lai</p>
                    </div>
                </div>
            </div>

            <!-- Export Buttons -->
            <div class="export-buttons">
                <button class="export-btn pdf" onclick="exportToPDF()">
                    üìÑ Xu·∫•t PDF
                </button>
                <button class="export-btn image" onclick="exportToImage()">
                    üñºÔ∏è Xu·∫•t ·∫¢nh
                </button>
                <button class="export-btn share" onclick="shareInfographic()">
                    üì§ Chia s·∫ª
                </button>
            </div>
        </div>
    `;
}

function getAgeFromForm() {
    const ageInput = document.getElementById('age');
    return ageInput ? ageInput.value : '18';
}

function getRecommendationSummary(result, scores) {
    const topScore = Math.max(...Object.values(scores));
    const topSkills = Object.keys(scores).filter(skill => scores[skill] === topScore);
    
    let summary = `D·ª±a tr√™n ph√¢n t√≠ch k·ªπ nƒÉng v√† s·ªü th√≠ch c·ªßa b·∫°n, `;
    
    if (topSkills.includes('technology')) {
        summary += `ch√∫ng t√¥i khuy·∫øn ngh·ªã t·∫≠p trung v√†o c√°c ng√†nh h·ªçc c√¥ng ngh·ªá th√¥ng tin, ph√°t tri·ªÉn ph·∫ßn m·ªÅm, ho·∫∑c thi·∫øt k·∫ø ƒë·ªì h·ªça. `;
    } else if (topSkills.includes('creativity')) {
        summary += `ch√∫ng t√¥i khuy·∫øn ngh·ªã c√°c ng√†nh h·ªçc thi·∫øt k·∫ø, ngh·ªá thu·∫≠t, ho·∫∑c truy·ªÅn th√¥ng. `;
    } else if (topSkills.includes('business')) {
        summary += `ch√∫ng t√¥i khuy·∫øn ngh·ªã c√°c ng√†nh h·ªçc qu·∫£n tr·ªã kinh doanh, marketing, ho·∫∑c k·∫ø to√°n. `;
    } else if (topSkills.includes('communication')) {
        summary += `ch√∫ng t√¥i khuy·∫øn ngh·ªã c√°c ng√†nh h·ªçc truy·ªÅn th√¥ng, marketing, ho·∫∑c qu·∫£n l√Ω. `;
    } else if (topSkills.includes('logic')) {
        summary += `ch√∫ng t√¥i khuy·∫øn ngh·ªã c√°c ng√†nh h·ªçc k·ªπ thu·∫≠t, c√¥ng ngh·ªá, ho·∫∑c khoa h·ªçc. `;
    } else {
        summary += `ch√∫ng t√¥i khuy·∫øn ngh·ªã c√°c ng√†nh h·ªçc th·ª±c h√†nh, k·ªπ thu·∫≠t, ho·∫∑c c√¥ng ngh·ªá. `;
    }
    
    summary += `H√£y xem k·∫øt qu·∫£ chi ti·∫øt trong tab "K·∫øt qu·∫£" ƒë·ªÉ bi·∫øt th√™m th√¥ng tin.`;
    
    return summary;
}

function addExportEventListeners() {
    // Add any additional event listeners for export functionality
    console.log('Export event listeners added');
}

// Export Functions
function exportToPDF() {
    alert('T√≠nh nƒÉng xu·∫•t PDF s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!');
}

function exportToImage() {
    alert('T√≠nh nƒÉng xu·∫•t ·∫£nh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!');
}

function shareInfographic() {
    if (navigator.share) {
        navigator.share({
            title: 'Infographic T∆∞ v·∫•n Ng√†nh h·ªçc FPT Polytechnic',
            text: 'Xem k·∫øt qu·∫£ t∆∞ v·∫•n ng√†nh h·ªçc c√° nh√¢n h√≥a c·ªßa t√¥i!',
            url: window.location.href
        });
    } else {
        // Fallback for browsers that don't support Web Share API
        const url = window.location.href;
        navigator.clipboard.writeText(url).then(() => {
            alert('ƒê√£ sao ch√©p link v√†o clipboard! B·∫°n c√≥ th·ªÉ chia s·∫ª link n√†y.');
        }).catch(() => {
            alert('Link: ' + url);
        });
    }
}

// Remove duplicate function


